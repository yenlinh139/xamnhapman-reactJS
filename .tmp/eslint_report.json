[{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\App.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { ROUTES } from \"@common/constants\";\nimport ProtectedRoute from \"@components/ProtectedRoute\";\nimport Home from \"@pages/home/Home\";\nimport WrapperLogin from \"@pages/login/WrapperLogin\";\nimport \"@styles/main.scss\";\nimport VerifyEmail from \"@components/VerifyEmail\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport Map from \"@pages/map/Map\";\nimport SettingUser from \"@pages/setting/SettingUser\";\nimport UserManagement from \"@pages/users/UserManagement\";\nimport AboutMe from \"@pages/about/AboutMe\";\nimport Feedback from \"@pages/feedback/Feedback\";\n\nconst App = () => {\n    return (\n        <HelmetProvider>\n            <BrowserRouter>\n                <Routes>\n                    <Route path={ROUTES.home} element={<Home />} />\n                    <Route path={ROUTES.verify_email} element={<VerifyEmail />} />\n                    <Route path={ROUTES.login} element={<WrapperLogin />} />\n                    <Route path={ROUTES.feedback} element={<Feedback />} />\n                    <Route path={ROUTES.about} element={<AboutMe />} />\n                    <Route element={<ProtectedRoute />}>\n                        <Route path={ROUTES.map} element={<Map />} />\n                        <Route path={ROUTES.users} element={<UserManagement />} />\n                        <Route path={ROUTES.setting} element={<SettingUser />} />\n                    </Route>\n                </Routes>\n            </BrowserRouter>\n        </HelmetProvider>\n    );\n};\n\nexport default App;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\common\\constants.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\common\\messageConfirm.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\common\\messageError.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\common\\validate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\Banner.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'backgroundImage' is missing in props validation","line":5,"column":19,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":34},{"ruleId":"react/prop-types","severity":2,"message":"'title' is missing in props validation","line":5,"column":36,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":41},{"ruleId":"react/prop-types","severity":2,"message":"'description' is missing in props validation","line":5,"column":43,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":54},{"ruleId":"react/prop-types","severity":2,"message":"'buttonText' is missing in props validation","line":5,"column":56,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":66},{"ruleId":"react/prop-types","severity":2,"message":"'buttonLink' is missing in props validation","line":5,"column":68,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":78}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\n\nconst Banner = ({ backgroundImage, title, description, buttonText, buttonLink }) => {\n    return (\n        <motion.div\n            className=\"banner\"\n            style={{ backgroundImage: `url(${backgroundImage})` }}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 1 }}\n        >\n            <div className=\"content\">\n                <h1>{title}</h1>\n                <div className=\"divider\"></div>\n                <p>{description}</p>\n                {buttonLink && (\n                    <NavLink to={buttonLink}>\n                        <button className=\"btn-primary\">{buttonText}</button>\n                    </NavLink>\n                )}\n            </div>\n        </motion.div>\n    );\n};\n\nexport default Banner;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\BetterWMS.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'L' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":2},{"ruleId":"no-undef","severity":2,"message":"'L' is not defined.","line":1,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'L' is not defined.","line":4,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'L' is not defined.","line":10,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'L' is not defined.","line":17,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":17,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'L' is not defined.","line":58,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":58,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'L' is not defined.","line":168,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":168,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'L' is not defined.","line":176,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":176,"endColumn":2},{"ruleId":"no-undef","severity":2,"message":"'L' is not defined.","line":177,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":177,"endColumn":17}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"L.TileLayer.BetterWMS = L.TileLayer.WMS.extend({\n    // Khi thêm lớp vào bản đồ\n    onAdd: function (map) {\n        L.TileLayer.WMS.prototype.onAdd.call(this, map);\n        map.on(\"click\", this.getFeatureInfo, this);\n    },\n\n    // Khi bỏ lớp khỏi bản đồ\n    onRemove: function (map) {\n        L.TileLayer.WMS.prototype.onRemove.call(this, map);\n        map.off(\"click\", this.getFeatureInfo, this);\n    },\n\n    // Gửi yêu cầu GetFeatureInfo\n    getFeatureInfo: function (evt) {\n        var url = this.getFeatureInfoUrl(evt.latlng);\n        var showResults = L.Util.bind(this.showGetFeatureInfo, this);\n        fetch(url)\n            .then((res) => res.text())\n            .then((data) => {\n                showResults(null, evt.latlng, data);\n            })\n            .catch((error) => {\n                showResults(error);\n            });\n    },\n\n    // Tạo URL GetFeatureInfo\n    getFeatureInfoUrl: function (latlng) {\n        var point = this._map.latLngToContainerPoint(latlng, this._map.getZoom());\n        var size = this._map.getSize();\n        var params = {\n            request: \"GetFeatureInfo\",\n            service: \"WMS\",\n            srs: \"EPSG:4326\",\n            styles: this.wmsParams.styles || \"\", // Đảm bảo có giá trị hợp lệ\n            transparent: this.wmsParams.transparent || true, // Đảm bảo có giá trị hợp lệ\n            version: this.wmsParams.version || \"1.1.1\", // Đảm bảo có giá trị hợp lệ\n            format: \"image/png\", // Định dạng hình ảnh\n            bbox: this._map.getBounds().toBBoxString(),\n            height: size.y,\n            width: size.x,\n            layers: this.wmsParams.layers,\n            query_layers: this.wmsParams.layers,\n            info_format: \"application/json\", // Định dạng trả về JSON\n        };\n\n        // Chọn đúng tham số `x` và `y` hoặc `i` và `j` dựa trên phiên bản\n        if (params.version === \"1.3.0\") {\n            params.i = point.x;\n            params.j = point.y;\n        } else {\n            params.x = point.x;\n            params.y = point.y;\n        }\n\n        // Trả về URL với các tham số GET\n        return this._url + L.Util.getParamString(params, this._url, true);\n    },\n\n    // Hiển thị kết quả GetFeatureInfo\n    showGetFeatureInfo: function (err, latlng, content) {\n        if (err) {\n            console.log(\"Error:\", err);\n            return;\n        }\n\n        try {\n            const featureInfo = JSON.parse(content);\n            const feature = featureInfo.features[0];\n            const props = feature?.properties;\n\n            if (!props) return;\n\n            const layerName = this.wmsParams.layers.split(\":\")[1];\n\n            const legendNames = {\n                salinityPoints: \"Điểm đo mặn\",\n                hydrometStations: \"Trạm khí tượng thủy văn\",\n                DiaPhanHuyen: \"Địa phận huyện\",\n                DiaGioiHuyen: \"Địa giới huyện\",\n                DiaPhanXa: \"Địa phận xã\",\n                DiemDoCao: \"Điểm độ cao\",\n                ThuyHe_line: \"Thủy hệ (đường)\",\n                ThuyHe_polygon: \"Thủy hệ (vùng)\",\n                GiaoThong_line: \"Giao thông (đường)\",\n                GiaoThong_polygon: \"Giao thông (vùng)\",\n                HienTrangSDD_2020: \"Hiện trạng sử dụng đất 2020\",\n                QuyHoachSDD_2030: \"Quy hoạch sử dụng đất 2030\",\n            };\n            let popupContent = `\n      <div style=\"font-family: 'Segoe UI', sans-serif; font-size: 14px; line-height: 1.6; padding: 6px 10px;\">\n        <div style=\"font-weight: bold; color: #2c3e50; font-size: 16px; margin-bottom: 5px; border-bottom: 1px solid #ccc;\">\n          🗂️ Thông tin lớp: ${legendNames[layerName]}\n        </div>\n    `;\n\n            switch (layerName) {\n                case \"DiaPhanHuyen\":\n                    popupContent += `\n          <b>📍 Huyện:</b> ${props.tenhuyen}<br/>\n          <b>🆔 Mã huyện:</b> ${props.mahuyen}<br/>\n          <b>📐 Diện tích:</b> ${props.dientichtunhien} m²\n        `;\n                    break;\n                case \"DiaPhanXa\":\n                    popupContent += `\n          <b>📍 Xã:</b> ${props.tenxa}<br/>\n          <b>🆔 Mã xã:</b> ${props.maxa}<br/>\n          <b>🏞️ Huyện:</b> ${props.tenhuyen}<br/>\n          <b>📐 Diện tích:</b> ${props.dientichtunhien} m²\n        `;\n                    break;\n                case \"DiemDoCao\":\n                    popupContent += `<b>📏 Độ cao:</b> ${props.docao_m} m`;\n                    break;\n                case \"GiaoThong_line\":\n                    popupContent += `\n          <b>🚧 Tên đường:</b> ${props.tenduong}<br/>\n          <b>📏 Chiều dài:</b> ${props.chieudai} m\n        `;\n                    break;\n                case \"GiaoThong_polygon\":\n                    popupContent += `\n          <b>🚧 Tên đường:</b> ${props.tenduong}<br/>\n          <b>↔️ Rộng:</b> ${props.dorong} m<br/>\n          <b>↕️ Dài:</b> ${props.chieudai} m<br/>\n          <b>🧱 Kết cấu:</b> ${props.ketcau}<br/>\n          <b>🛠️ Tình trạng:</b> ${props.tinhtrang}\n        `;\n                    break;\n                case \"ThuyHe_line\":\n                    popupContent += `\n          <b>🌊 Tên sông/kênh:</b> ${props.ten}<br/>\n          <b>🔼 Điểm đầu:</b> ${props.diemdau}<br/>\n          <b>🔽 Điểm cuối:</b> ${props.diemcuoi}<br/>\n          <b>📏 Dài:</b> ${props.chieudai} m\n        `;\n                    break;\n                case \"ThuyHe_polygon\":\n                    popupContent += `\n          <b>🌊 Tên:</b> ${props.ten}<br/>\n          <b>📖 Loại:</b> ${props.phanloai}<br/>\n          <b>↔️ Rộng:</b> ${props.dorong} m<br/>\n          <b>↕️ Sâu:</b> ${props.dosau} m<br/>\n          <b>⚠️ Trạng thái:</b> ${props.trangthai}\n        `;\n                    break;\n                case \"HienTrangSDD_2020\":\n                    popupContent += `\n          <b>🌱 Loại đất:</b> ${props.loaidat}<br/>\n          <b>🔢 Ký hiệu:</b> ${props.kihieu}\n        `;\n                    break;\n                case \"QuyHoachSDD_2030\":\n                    popupContent += `\n          <b>🏗️ Loại đất:</b> ${props.loaidat}<br/>\n          <b>📚 Phân loại:</b> ${props.phanloai}<br/>\n          <b>🔢 Ký hiệu:</b> ${props.kihieu}\n        `;\n                    break;\n                default:\n                    popupContent += `<i>Không có cấu hình hiển thị cho lớp này.</i>`;\n            }\n\n            popupContent += `</div>`; // kết thúc container\n\n            L.popup().setLatLng(latlng).setContent(popupContent).openOn(this._map);\n        } catch (e) {\n            console.log(\"Lỗi khi xử lý dữ liệu JSON:\", e);\n        }\n    },\n});\n\n// Hàm tạo lớp BetterWMS\nL.tileLayer.betterWms = function (url, options) {\n    return new L.TileLayer.BetterWMS(url, options);\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\CustomStyles.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\LeftMenuMap.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'sidebarOpen' is missing in props validation","line":8,"column":5,"nodeType":"Property","messageId":"missingPropType","endLine":8,"endColumn":16},{"ruleId":"react/prop-types","severity":2,"message":"'setSidebarOpen' is missing in props validation","line":9,"column":5,"nodeType":"Property","messageId":"missingPropType","endLine":9,"endColumn":19},{"ruleId":"react/prop-types","severity":2,"message":"'onLayerToggle' is missing in props validation","line":10,"column":5,"nodeType":"Property","messageId":"missingPropType","endLine":10,"endColumn":18},{"ruleId":"react/prop-types","severity":2,"message":"'searchResults' is missing in props validation","line":11,"column":5,"nodeType":"Property","messageId":"missingPropType","endLine":11,"endColumn":18},{"ruleId":"react/prop-types","severity":2,"message":"'setSelectedLocation' is missing in props validation","line":12,"column":5,"nodeType":"Property","messageId":"missingPropType","endLine":12,"endColumn":24},{"ruleId":"react/prop-types","severity":2,"message":"'setHighlightedFeature' is missing in props validation","line":13,"column":5,"nodeType":"Property","messageId":"missingPropType","endLine":13,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'highlightedFeature' is defined but never used.","line":14,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"highlightedFeature"},"fix":{"range":[390,414],"text":""},"desc":"Remove unused variable 'highlightedFeature'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'highlightedFeature' is missing in props validation","line":14,"column":5,"nodeType":"Property","messageId":"missingPropType","endLine":14,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'setSelectedItemId' is assigned a value but never used.","line":24,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"setSelectedItemId"},"fix":{"range":[766,785],"text":""},"desc":"Remove unused variable 'setSelectedItemId'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'searchResults.length' is missing in props validation","line":49,"column":44,"nodeType":"Identifier","messageId":"missingPropType","endLine":49,"endColumn":50},{"ruleId":"react/prop-types","severity":2,"message":"'searchResults.length' is missing in props validation","line":329,"column":71,"nodeType":"Identifier","messageId":"missingPropType","endLine":329,"endColumn":77},{"ruleId":"react/prop-types","severity":2,"message":"'searchResults.map' is missing in props validation","line":338,"column":44,"nodeType":"Identifier","messageId":"missingPropType","endLine":338,"endColumn":47},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'handleClick', 'handleHydrometStationsToggle', 'handleLayerToggle', 'handleSalinityPointsToggle', and 'setSelectedLocation'. Either include them or remove the dependency array. If 'setSelectedLocation' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":441,"column":8,"nodeType":"ArrayExpression","endLine":450,"endColumn":6,"suggestions":[{"desc":"Update the dependencies array to be: [state.activeTab, state.enabledLayers, state.openMenuIndex, state.isLoadingSearchResults, districtList, selectedDistrict, handleSalinityPointsToggle, handleHydrometStationsToggle, handleLayerToggle, setSelectedLocation, searchResults, selectedItemId, handleClick]","fix":{"range":[23712,23935],"text":"[state.activeTab, state.enabledLayers, state.openMenuIndex, state.isLoadingSearchResults, districtList, selectedDistrict, handleSalinityPointsToggle, handleHydrometStationsToggle, handleLayerToggle, setSelectedLocation, searchResults, selectedItemId, handleClick]"}}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useMemo } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { ROUTES } from \"@common/constants\";\nimport imageLogo from \"@assets/logo.png\";\nimport { menusGIS } from \"@pages/map/dataLayers\";\n\nfunction LeftMenuMap({\n    sidebarOpen,\n    setSidebarOpen,\n    onLayerToggle,\n    searchResults,\n    setSelectedLocation,\n    setHighlightedFeature,\n    highlightedFeature,\n}) {\n    const [state, setState] = useState({\n        openMenuIndex: null,\n        enabledLayers: [],\n        activeTab: \"Data\", // Mặc định là tab Data\n        isLoadingSearchResults: true,\n    });\n    const [districtList, setDistrictList] = useState([]);\n    const [selectedDistrict, setSelectedDistrict] = useState(null);\n    const [selectedItemId, setSelectedItemId] = useState(null);\n\n    const handleSalinityPointsToggle = (checked) => {\n        setState((prevState) => ({\n            ...prevState,\n            enabledLayers: checked\n                ? [...prevState.enabledLayers, \"salinityPoints\"]\n                : prevState.enabledLayers.filter((layer) => layer !== \"salinityPoints\"),\n        }));\n\n        onLayerToggle(\"salinityPoints\", checked);\n    };\n\n    const handleHydrometStationsToggle = (checked) => {\n        setState((prevState) => ({\n            ...prevState,\n            enabledLayers: checked\n                ? [...prevState.enabledLayers, \"hydrometStations\"]\n                : prevState.enabledLayers.filter((layer) => layer !== \"hydrometStations\"),\n        }));\n\n        onLayerToggle(\"hydrometStations\", checked);\n    };\n\n    useEffect(() => {\n        if (searchResults && searchResults.length > 0) {\n            setState((prevState) => ({\n                ...prevState,\n                activeTab: \"search\",\n                isLoadingSearchResults: false,\n            }));\n        } else {\n            setState((prevState) => ({\n                ...prevState,\n                isLoadingSearchResults: false,\n            }));\n        }\n    }, [searchResults]);\n\n    const toggleDropdown = (index) => {\n        setState((prevState) => ({\n            ...prevState,\n            openMenuIndex: prevState.openMenuIndex === index ? null : index,\n        }));\n    };\n\n    const handleLayerToggle = async (layer, checked) => {\n        const updatedLayers = checked\n            ? [...state.enabledLayers, layer]\n            : state.enabledLayers.filter((l) => l !== layer);\n\n        onLayerToggle(layer, checked);\n\n        if (layer === \"DiaPhanHuyen\" && checked) {\n            try {\n                const res = await fetch(`${import.meta.env.VITE_BASE_URL}/api/districts`);\n                const data = await res.json();\n                console.log(\"Districts data:\", data);\n\n                setDistrictList(data);\n            } catch (error) {\n                console.error(\"Lỗi khi lấy danh sách huyện:\", error);\n            }\n        }\n\n        setState((prevState) => ({\n            ...prevState,\n            enabledLayers: updatedLayers,\n        }));\n    };\n\n    const getBoundsFromCoordinates = (coordinates) => {\n        let lats = [];\n        let lngs = [];\n\n        const extractCoords = (coords) => {\n            coords.forEach((c) => {\n                if (typeof c[0] === \"number\" && typeof c[1] === \"number\") {\n                    lngs.push(c[0]);\n                    lats.push(c[1]);\n                } else {\n                    extractCoords(c);\n                }\n            });\n        };\n\n        extractCoords(coordinates);\n\n        const southWest = [Math.min(...lats), Math.min(...lngs)];\n        const northEast = [Math.max(...lats), Math.max(...lngs)];\n\n        return [southWest, northEast];\n    };\n\n    const handleClick = (result) => {\n        try {\n            if (result.type === \"diem_do_man\") {\n                const lat = result.ViDo;\n                const lng = result.KinhDo;\n                if (lat && lng) {\n                    setSelectedLocation({ lat, lng, zoom: 15 });\n                    setHighlightedFeature({\n                        type: \"Point\",\n                        coordinates: [lng, lat],\n                        icon: \"droplet\",\n                        name: result.TenDiem,\n                    });\n                }\n                return;\n            }\n\n            const geojson = result.geom;\n            if (!geojson || !geojson.type) return;\n\n            if (geojson.type === \"Point\") {\n                const [lng, lat] = geojson.coordinates;\n                setSelectedLocation({ lat, lng, zoom: 14 });\n                setHighlightedFeature(geojson);\n            } else if (geojson.type === \"Polygon\" || geojson.type === \"MultiPolygon\") {\n                const bounds = getBoundsFromCoordinates(geojson.coordinates);\n                setSelectedLocation({ bounds });\n                setHighlightedFeature(geojson);\n            }\n        } catch (err) {\n            console.error(\"Lỗi xử lý GeoJSON hoặc tọa độ:\", err);\n        }\n    };\n\n    const renderTabContent = useMemo(() => {\n        if (state.activeTab === \"Data\") {\n            return (\n                <div className=\"tab-content-data\">\n                    {/* Monitoring Data Section */}\n                    <div className=\"data-section\">\n                        <div className=\"section-header\">\n                            <i className=\"fa-solid fa-chart-line section-icon\"></i>\n                            <h3 className=\"section-title\">Dữ liệu quan trắc</h3>\n                        </div>\n                        <div className=\"monitoring-layers\">\n                            <div className=\"layer-item monitoring-layer\">\n                                <div className=\"layer-toggle\">\n                                    <input\n                                        type=\"checkbox\"\n                                        id=\"layer-salinity-points\"\n                                        className=\"layer-checkbox\"\n                                        checked={state.enabledLayers.includes(\"salinityPoints\")}\n                                        onChange={(e) => handleSalinityPointsToggle(e.target.checked)}\n                                    />\n                                    <label htmlFor=\"layer-salinity-points\" className=\"layer-label\">\n                                        <div className=\"layer-info\">\n                                            <div className=\"layer-icon-wrapper salinity-icon\">\n                                                <i className=\"fa-solid fa-droplet\"></i>\n                                            </div>\n                                            <div className=\"layer-details\">\n                                                <span className=\"layer-name\">Điểm đo mặn</span>\n                                                <span className=\"layer-desc\">Các điểm quan trắc độ mặn</span>\n                                            </div>\n                                        </div>\n                                    </label>\n                                </div>\n                            </div>\n\n                            <div className=\"layer-item monitoring-layer\">\n                                <div className=\"layer-toggle\">\n                                    <input\n                                        type=\"checkbox\"\n                                        id=\"layer-hydromet-stations\"\n                                        className=\"layer-checkbox\"\n                                        checked={state.enabledLayers.includes(\"hydrometStations\")}\n                                        onChange={(e) => handleHydrometStationsToggle(e.target.checked)}\n                                    />\n                                    <label htmlFor=\"layer-hydromet-stations\" className=\"layer-label\">\n                                        <div className=\"layer-info\">\n                                            <div className=\"layer-icon-wrapper hydromet-icon\">\n                                                <i className=\"fa-solid fa-tower-observation\"></i>\n                                            </div>\n                                            <div className=\"layer-details\">\n                                                <span className=\"layer-name\">Trạm khí tượng thủy văn</span>\n                                                <span className=\"layer-desc\">Trạm quan trắc thời tiết</span>\n                                            </div>\n                                        </div>\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* GIS Data Sections */}\n                    {menusGIS.map((group, groupIndex) => (\n                        <div className=\"data-section\" key={groupIndex}>\n                            <div className=\"section-header\">\n                                <i className={`${group.icon || \"fa-solid fa-layer-group\"} section-icon`}></i>\n                                <h3 className=\"section-title\">{group.title}</h3>\n                            </div>\n                            <div className=\"gis-categories\">\n                                {group.items.map((menu, itemIndex) => {\n                                    const uniqueIndex = `${groupIndex}-${itemIndex}`;\n                                    const isOpen = state.openMenuIndex === uniqueIndex;\n\n                                    return (\n                                        <div className=\"category-item\" key={uniqueIndex}>\n                                            <div\n                                                className={`category-header ${isOpen ? \"active\" : \"\"}`}\n                                                onClick={() => toggleDropdown(uniqueIndex)}\n                                            >\n                                                <div className=\"category-info\">\n                                                    <i className={`${menu.icon} category-icon`}></i>\n                                                    <span className=\"category-name\">{menu.name}</span>\n                                                </div>\n                                                <i\n                                                    className={`fa-solid fa-chevron-right expand-icon ${\n                                                        isOpen ? \"rotated\" : \"\"\n                                                    }`}\n                                                ></i>\n                                            </div>\n\n                                            {isOpen && (\n                                                <div className=\"category-layers\">\n                                                    {menu.layers.map((layer, idx) => (\n                                                        <div\n                                                            className=\"layer-item\"\n                                                            key={`${uniqueIndex}-${idx}`}\n                                                        >\n                                                            <div className=\"layer-toggle\">\n                                                                <input\n                                                                    type=\"checkbox\"\n                                                                    id={`layer-${layer}`}\n                                                                    className=\"layer-checkbox\"\n                                                                    checked={state.enabledLayers.includes(\n                                                                        layer,\n                                                                    )}\n                                                                    onChange={(e) =>\n                                                                        handleLayerToggle(\n                                                                            layer,\n                                                                            e.target.checked,\n                                                                        )\n                                                                    }\n                                                                />\n                                                                <label\n                                                                    htmlFor={`layer-${layer}`}\n                                                                    className=\"layer-label\"\n                                                                >\n                                                                    <span className=\"layer-name\">\n                                                                        {menu.nameItem?.[idx] || layer}\n                                                                    </span>\n                                                                </label>\n                                                            </div>\n                                                        </div>\n                                                    ))}\n                                                </div>\n                                            )}\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                    ))}\n\n                    {/* District Selection */}\n                    {state.enabledLayers.includes(\"DiaPhanHuyen\") && districtList.length > 0 && (\n                        <div className=\"data-section\">\n                            <div className=\"section-header\">\n                                <i className=\"fa-solid fa-map-location-dot section-icon\"></i>\n                                <h3 className=\"section-title\">Lọc theo huyện</h3>\n                            </div>\n                            <div className=\"district-selector\">\n                                <select\n                                    className=\"district-select\"\n                                    value={selectedDistrict || \"\"}\n                                    onChange={(e) => {\n                                        const district = districtList.find((d) => d.name === e.target.value);\n                                        setSelectedDistrict(e.target.value);\n                                        if (district) {\n                                            setSelectedLocation({\n                                                lat: district.centerLat,\n                                                lng: district.centerLng,\n                                                zoom: 12,\n                                            });\n                                        }\n                                    }}\n                                >\n                                    <option value=\"\">-- Chọn huyện --</option>\n                                    {districtList.map((d, idx) => (\n                                        <option key={idx} value={d.name}>\n                                            {d.name}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            );\n        }\n\n        if (state.activeTab === \"search\") {\n            return (\n                <div className=\"tab-content-search\">\n                    {state.isLoadingSearchResults ? (\n                        <div className=\"search-state\">\n                            <div className=\"loading-spinner\">\n                                <i className=\"fa-solid fa-spinner fa-spin\"></i>\n                            </div>\n                            <p className=\"state-message\">Đang tải dữ liệu...</p>\n                        </div>\n                    ) : Array.isArray(searchResults) && searchResults.length === 0 ? (\n                        <div className=\"search-state\">\n                            <div className=\"empty-icon\">\n                                <i className=\"fa-solid fa-magnifying-glass\"></i>\n                            </div>\n                            <p className=\"state-message\">Không tìm thấy kết quả.</p>\n                        </div>\n                    ) : Array.isArray(searchResults) ? (\n                        <div className=\"search-results\">\n                            {searchResults.map((result, idx) => (\n                                <div\n                                    key={result.id || idx}\n                                    className={`result-card ${\n                                        selectedItemId === result.id ? \"selected\" : \"\"\n                                    }`}\n                                    onClick={() => handleClick(result)}\n                                >\n                                    {result.type === \"diem_do_man\" ? (\n                                        <div className=\"result-content salinity-result\">\n                                            <div className=\"result-header\">\n                                                <div className=\"result-icon\">\n                                                    <i className=\"fa-solid fa-droplet\"></i>\n                                                </div>\n                                                <div className=\"result-title\">\n                                                    <h4 className=\"result-name\">{result.TenDiem}</h4>\n                                                    <span className=\"result-type\">Điểm đo mặn</span>\n                                                </div>\n                                            </div>\n                                            <div className=\"result-details\">\n                                                <div className=\"detail-item\">\n                                                    <span className=\"detail-label\">Phân loại:</span>\n                                                    <span className=\"detail-value\">{result.PhanLoai}</span>\n                                                </div>\n                                                <div className=\"detail-item\">\n                                                    <span className=\"detail-label\">Tọa độ:</span>\n                                                    <span className=\"detail-value\">\n                                                        {result.ViDo}, {result.KinhDo}\n                                                    </span>\n                                                </div>\n                                                <div className=\"detail-item\">\n                                                    <span className=\"detail-label\">Thời gian:</span>\n                                                    <span className=\"detail-value\">{result.ThoiGian}</span>\n                                                </div>\n                                                <div className=\"detail-item\">\n                                                    <span className=\"detail-label\">Tần suất:</span>\n                                                    <span className=\"detail-value\">{result.TanSuat}</span>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    ) : result.tenxa ? (\n                                        <div className=\"result-content ward-result\">\n                                            <div className=\"result-header\">\n                                                <div className=\"result-icon\">\n                                                    <i className=\"fa-solid fa-building\"></i>\n                                                </div>\n                                                <div className=\"result-title\">\n                                                    <h4 className=\"result-name\">{result.tenxa}</h4>\n                                                    <span className=\"result-type\">{result.tenhuyen}</span>\n                                                </div>\n                                            </div>\n                                            <div className=\"result-details\">\n                                                <div className=\"detail-item\">\n                                                    <span className=\"detail-label\">Mã xã:</span>\n                                                    <span className=\"detail-value\">{result.maxa}</span>\n                                                </div>\n                                                <div className=\"detail-item\">\n                                                    <span className=\"detail-label\">Diện tích:</span>\n                                                    <span className=\"detail-value\">\n                                                        {result.dientichtunhien.toFixed(2)} ha\n                                                    </span>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    ) : (\n                                        <div className=\"result-content district-result\">\n                                            <div className=\"result-header\">\n                                                <div className=\"result-icon\">\n                                                    <i className=\"fa-solid fa-city\"></i>\n                                                </div>\n                                                <div className=\"result-title\">\n                                                    <h4 className=\"result-name\">{result.tenhuyen}</h4>\n                                                    <span className=\"result-type\">Huyện</span>\n                                                </div>\n                                            </div>\n                                            <div className=\"result-details\">\n                                                <div className=\"detail-item\">\n                                                    <span className=\"detail-label\">Mã huyện:</span>\n                                                    <span className=\"detail-value\">{result.mahuyen}</span>\n                                                </div>\n                                                <div className=\"detail-item\">\n                                                    <span className=\"detail-label\">Diện tích:</span>\n                                                    <span className=\"detail-value\">\n                                                        {result.dientichtunhien.toFixed(2)} ha\n                                                    </span>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            ))}\n                        </div>\n                    ) : (\n                        <div className=\"search-state\">\n                            <div className=\"error-icon\">\n                                <i className=\"fa-solid fa-exclamation-triangle\"></i>\n                            </div>\n                            <p className=\"state-message\">Dữ liệu không hợp lệ.</p>\n                        </div>\n                    )}\n                </div>\n            );\n        }\n    }, [\n        state.activeTab,\n        state.openMenuIndex,\n        state.enabledLayers,\n        searchResults,\n        state.isLoadingSearchResults,\n        selectedItemId,\n        districtList,\n        selectedDistrict,\n    ]);\n\n    return (\n        <>\n            {!sidebarOpen && <div className=\"overlay\" onClick={() => setSidebarOpen(true)}></div>}\n\n            <div className={`sidebar ${sidebarOpen ? \"\" : \"open\"}`}>\n                <div className=\"sidebarHeader pt-3\">\n                    <NavLink to={ROUTES.home}>\n                        <div className=\"logo-container\">\n                            <img src={imageLogo} alt=\"logo\" className=\"w-100\" />\n                        </div>\n                    </NavLink>\n                    <div className=\"lineLeftMenu\"></div>\n                </div>\n\n                <div className=\"d-flex border-bottom text-center\">\n                    <button\n                        onClick={() => setState((prevState) => ({ ...prevState, activeTab: \"Data\" }))}\n                        className={`flex-fill py-2 fw-semibold text-uppercase text-sm border-0 bg-transparent ${\n                            state.activeTab === \"Data\"\n                                ? \"text-dark border-bottom border-2 border-warning\"\n                                : \"text-secondary\"\n                        }`}\n                    >\n                        LỚP DỮ LIỆU\n                    </button>\n                    <button\n                        onClick={() => setState((prevState) => ({ ...prevState, activeTab: \"search\" }))}\n                        className={`flex-fill py-2 fw-semibold text-uppercase text-sm border-0 bg-transparent ${\n                            state.activeTab === \"search\"\n                                ? \"text-dark border-bottom border-2 border-warning\"\n                                : \"text-secondary\"\n                        }`}\n                    >\n                        TÌM KIẾM\n                    </button>\n                </div>\n\n                {/* Tab Content */}\n                {renderTabContent}\n            </div>\n        </>\n    );\n}\n\nexport default LeftMenuMap;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\Loading.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\ModalConfirm.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'message' is missing in props validation","line":3,"column":25,"nodeType":"Property","messageId":"missingPropType","endLine":3,"endColumn":32},{"ruleId":"react/prop-types","severity":2,"message":"'onConfirm' is missing in props validation","line":3,"column":34,"nodeType":"Property","messageId":"missingPropType","endLine":3,"endColumn":43},{"ruleId":"react/prop-types","severity":2,"message":"'onCancel' is missing in props validation","line":3,"column":45,"nodeType":"Property","messageId":"missingPropType","endLine":3,"endColumn":53}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\";\n\nfunction ModalConfirm({ message, onConfirm, onCancel }) {\n    useEffect(() => {\n        // Lấy modal và sử dụng API Bootstrap 5 để điều khiển\n        const modalElement = document.getElementById(\"ModalConfirm\");\n        const modal = new window.bootstrap.Modal(modalElement);\n\n        modal.show();\n\n        return () => {\n            modal.hide();\n        };\n    }, []);\n\n    return (\n        <div\n            className=\"modal fade\"\n            id=\"ModalConfirm\"\n            tabIndex=\"-1\"\n            aria-labelledby=\"exampleModalLabel\"\n            aria-hidden=\"true\"\n            style={{ zIndex: \"50000\" }}\n            data-bs-keyboard=\"false\"\n            data-bs-backdrop=\"static\"\n        >\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n                            Confirmation\n                        </h5>\n                        <button\n                            type=\"button\"\n                            className=\"btn-close\"\n                            data-bs-dismiss=\"modal\"\n                            aria-label=\"Close\"\n                            onClick={onCancel}\n                        ></button>\n                    </div>\n                    <div className=\"modal-body\">{message}</div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={onCancel}>\n                            Cancel\n                        </button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={onConfirm}>\n                            OK\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ModalConfirm;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\ProtectedRoute.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\ToastCommon.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\ToastCustom.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\VerifyEmail.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":15,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[578,613],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":25,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":27}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nconst VerifyEmail = () => {\n    const { userId } = useParams(); // Nhận email từ URL\n    const [message, setMessage] = useState(\"\");\n    const [loading, setLoading] = useState(true);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        // Gửi yêu cầu xác thực email đến backend\n        const verifyEmail = async () => {\n            try {\n                const response = await fetch(`http://localhost:4000/api/verify-email/${userId}`);\n                const data = await response.json();\n\n                if (response.ok) {\n                    setMessage(\"Email đã được xác thực thành công!\");\n                    setTimeout(() => {\n                        navigate(\"/login\"); // Chuyển hướng tới trang đăng nhập sau 3 giây\n                    }, 3000);\n                } else {\n                    setMessage(\"Xác thực email thất bại. Vui lòng thử lại.\");\n                }\n            } catch (error) {\n                setMessage(\"Có lỗi xảy ra. Vui lòng thử lại sau.\");\n            }\n            setLoading(false);\n        };\n\n        verifyEmail();\n    }, [userId, navigate]);\n\n    if (loading) {\n        return <div>Đang xác thực...</div>;\n    }\n\n    return (\n        <div className=\"verify-email-container\">\n            <h2>{message}</h2>\n            <p>\n                Hệ thống đang xử lý xác thực của bạn. Bạn sẽ được chuyển hướng đến trang đăng nhập trong vài\n                giây.\n            </p>\n        </div>\n    );\n};\n\nexport default VerifyEmail;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\convertDMSToDecimal.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\map\\HydrometMarkers.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'unitMap' is assigned a value but never used.","line":116,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"unitMap"},"fix":{"range":[4193,4225],"text":""},"desc":"Remove unused variable 'unitMap'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport L from \"leaflet\";\nimport { convertDMSToDecimalNo } from \"@components/convertDMSToDecimal\";\nimport { fetchHydrometStations, fetchHydrometData } from \"@components/map/mapDataServices\";\nimport { prefixUnitMap } from \"@components/map/mapStyles\";\n\nconst getHydrometIcon = () => {\n    return L.divIcon({\n        className: \"custom-hydromet-icon\",\n        html: `<i class=\"fa-solid fa-tower-observation\" style=\"color: red; font-size: 1.5rem;\"></i>`,\n        iconSize: [20, 20],\n        iconAnchor: [10, 10],\n        popupAnchor: [0, -10],\n    });\n};\n\n// Enhanced popup creation with multiple parameter support\nexport const createHydrometPopup = (station, hydrometeorologyData) => {\n    console.log(`Station data:`, station);\n    console.log(`Hydrometeorology data:`, hydrometeorologyData);\n\n    // Parse the latest data\n    const latestData =\n        hydrometeorologyData && hydrometeorologyData.length > 0\n            ? hydrometeorologyData[hydrometeorologyData.length - 1]\n            : null;\n\n    if (!latestData) {\n        return createBasicPopup(station, \"Chưa có dữ liệu\");\n    }\n\n    // Extract and categorize parameters\n    const rainfallParams = {};\n    const temperatureParams = {};\n    const humidityParams = {};\n\n    Object.keys(latestData).forEach((key) => {\n        if (key.startsWith(\"R_\")) {\n            rainfallParams[key] = latestData[key];\n        } else if (key.startsWith(\"T\")) {\n            temperatureParams[key] = latestData[key];\n        } else if (key.startsWith(\"H\")) {\n            humidityParams[key] = latestData[key];\n        }\n    });\n\n    // Get primary parameter for main display using prefixUnitMap\n    const { primaryLabel, primaryValue, primaryUnit, statusColor } = getPrimaryParameter(\n        rainfallParams,\n        temperatureParams,\n        humidityParams,\n    );\n\n    const formattedDate = latestData.Ngày || \"Chưa có dữ liệu\";\n\n    return `\n    <div class=\"modern-popup hydromet-popup enhanced\">\n      <div class=\"popup-header\">\n        <div class=\"popup-title\">\n          <h4 class=\"popup-name\">${station.TenTam || station.TenTram}</h4>\n          <span class=\"popup-type\">Trạm khí tượng thủy văn</span>\n        </div>\n      </div>\n      \n      <div class=\"popup-content\">\n        <div class=\"popup-main-value\">\n          <span class=\"value-label\">${primaryLabel}</span>\n          <span class=\"value-number\" style=\"color: ${statusColor}\">\n            ${primaryValue.toFixed(1)} ${primaryUnit}\n          </span>\n          <span class=\"value-date\">${formattedDate}</span>\n        </div>\n        \n        <div class=\"multi-param-grid\">\n          ${createParameterCards(rainfallParams, temperatureParams, humidityParams)}\n        </div>\n        \n        <div class=\"popup-details\">\n          <div class=\"detail-grid\">\n            <div class=\"detail-item\">\n              <div class=\"detail-content\">\n                <strong class=\"detail-label\"><i class=\"detail-icon\">🏷️</i> Phân loại:</strong>\n                <span class=\"detail-value\">${station.PhanLoai || \"Không xác định\"}</span>\n              </div>\n            </div>\n            \n            <div class=\"detail-item\">\n              <div class=\"detail-content\">\n                <strong class=\"detail-label\"><i class=\"detail-icon\">⏰</i> Thời gian:</strong>\n                <span class=\"detail-value\">${station.ThoiGian || \"Không xác định\"}</span>\n              </div>\n            </div>\n            \n            <div class=\"detail-item\">\n              <div class=\"detail-content\">\n                <strong class=\"detail-label\"><i class=\"detail-icon\">📊</i> Tần suất:</strong>\n                <span class=\"detail-value\">${station.TanSuat || \"Không xác định\"}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"popup-actions\">\n          <button class=\"action-btn primary\" onclick=\"window.openHydrometDetails('${station.KiHieu}')\">\n            <i class=\"btn-icon\">📈</i>\n            Xem biểu đồ chi tiết\n          </button>\n        </div>\n      </div>\n    </div>\n  `;\n};\n\n// Helper function to create parameter cards with proper units and colors\nconst createParameterCards = (rainfall, temperature, humidity) => {\n    const unitMap = prefixUnitMap();\n    let cards = \"\";\n\n    // Rainfall parameters\n    if (Object.keys(rainfall).length > 0) {\n        const rainfallCard = Object.entries(rainfall)\n            .map(([key, value]) => {\n                const details = getParameterDetails(key, value);\n                return `\n          <div class=\"param-item rainfall\">\n            <div class=\"param-icon\">${details.icon}</div>\n            <div class=\"param-content\">\n              <span class=\"param-label\">${details.label}</span>\n              <span class=\"param-value\" style=\"color: ${details.color}\">\n                ${details.value.toFixed(1)} ${details.unit}\n              </span>\n            </div>\n          </div>\n        `;\n            })\n            .join(\"\");\n        cards += rainfallCard;\n    }\n\n    // Temperature parameters\n    if (Object.keys(temperature).length > 0) {\n        const tempCard = Object.entries(temperature)\n            .map(([key, value]) => {\n                const details = getParameterDetails(key, value);\n                return `\n          <div class=\"param-item temperature\">\n            <div class=\"param-icon\">${details.icon}</div>\n            <div class=\"param-content\">\n              <span class=\"param-label\">${details.label}</span>\n              <span class=\"param-value\" style=\"color: ${details.color}\">\n                ${details.value.toFixed(1)} ${details.unit}\n              </span>\n            </div>\n          </div>\n        `;\n            })\n            .join(\"\");\n        cards += tempCard;\n    }\n\n    // Humidity parameters\n    if (Object.keys(humidity).length > 0) {\n        const humidityCard = Object.entries(humidity)\n            .map(([key, value]) => {\n                const details = getParameterDetails(key, value);\n                return `\n          <div class=\"param-item humidity\">\n            <div class=\"param-icon\">${details.icon}</div>\n            <div class=\"param-content\">\n              <span class=\"param-label\">${details.label}</span>\n              <span class=\"param-value\" style=\"color: ${details.color}\">\n                ${details.value.toFixed(1)} ${details.unit}\n              </span>\n            </div>\n          </div>\n        `;\n            })\n            .join(\"\");\n        cards += humidityCard;\n    }\n\n    return cards;\n};\n\n// Helper function to get primary parameter for display\nconst getPrimaryParameter = (rainfallParams, temperatureParams, humidityParams) => {\n    const unitMap = prefixUnitMap();\n\n    // Priority: Rainfall > Temperature > Humidity\n    if (Object.keys(rainfallParams).length > 0) {\n        const totalRainfall = Object.values(rainfallParams).reduce(\n            (sum, val) => sum + (parseFloat(val) || 0),\n            0,\n        );\n        return {\n            primaryLabel: unitMap.R.content,\n            primaryValue: totalRainfall,\n            primaryUnit: unitMap.R.donvi,\n            statusColor: getRainfallColor(totalRainfall),\n        };\n    } else if (Object.keys(temperatureParams).length > 0) {\n        // Prioritize average temperature\n        const tempKey =\n            Object.keys(temperatureParams).find((key) => key.includes(\"tb\")) ||\n            Object.keys(temperatureParams)[0];\n        const tempValue = parseFloat(temperatureParams[tempKey]) || 0;\n        const tempType = tempKey.includes(\"tb\") ? \"Ttb\" : tempKey.includes(\"x\") ? \"Tx\" : \"Tm\";\n\n        return {\n            primaryLabel: unitMap[tempType].content,\n            primaryValue: tempValue,\n            primaryUnit: unitMap[tempType].donvi,\n            statusColor: getTemperatureColor(tempValue),\n        };\n    } else if (Object.keys(humidityParams).length > 0) {\n        // Prioritize average humidity\n        const humidityKey =\n            Object.keys(humidityParams).find((key) => key.includes(\"tb\")) || Object.keys(humidityParams)[0];\n        const humidityValue = parseFloat(humidityParams[humidityKey]) || 0;\n        const humidityType = humidityKey.includes(\"tb\") ? \"Htb\" : humidityKey.includes(\"x\") ? \"Hx\" : \"Hm\";\n\n        return {\n            primaryLabel: unitMap[humidityType].content,\n            primaryValue: humidityValue,\n            primaryUnit: unitMap[humidityType].donvi,\n            statusColor: getHumidityColor(humidityValue),\n        };\n    }\n\n    return {\n        primaryLabel: \"Không có dữ liệu\",\n        primaryValue: 0,\n        primaryUnit: \"\",\n        statusColor: \"#6c757d\",\n    };\n};\n\n// Color functions based on parameter values\nconst getRainfallColor = (value) => {\n    if (value === 0) return \"#6c757d\"; // Gray for no rain\n    if (value < 10) return \"#28a745\"; // Green for light rain\n    if (value < 50) return \"#ffc107\"; // Yellow for moderate rain\n    if (value < 100) return \"#fd7e14\"; // Orange for heavy rain\n    return \"#dc3545\"; // Red for very heavy rain\n};\n\nconst getTemperatureColor = (value) => {\n    if (value < 20) return \"#007bff\"; // Blue for cold\n    if (value < 25) return \"#28a745\"; // Green for cool\n    if (value < 30) return \"#ffc107\"; // Yellow for warm\n    if (value < 35) return \"#fd7e14\"; // Orange for hot\n    return \"#dc3545\"; // Red for very hot\n};\n\nconst getHumidityColor = (value) => {\n    if (value < -50) return \"#dc3545\"; // Red for very low water level\n    if (value < 0) return \"#fd7e14\"; // Orange for low water level\n    if (value < 50) return \"#ffc107\"; // Yellow for normal water level\n    if (value < 100) return \"#28a745\"; // Green for high water level\n    return \"#007bff\"; // Blue for very high water level\n};\n\n// Helper function to get parameter details with correct units from prefixUnitMap\nconst getParameterDetails = (paramKey, value) => {\n    const unitMap = prefixUnitMap();\n    const numValue = parseFloat(value) || 0;\n\n    // Determine parameter type and get appropriate unit/color\n    if (paramKey.startsWith(\"R_\")) {\n        return {\n            label: getParameterLabel(paramKey),\n            value: numValue,\n            unit: unitMap.R.donvi,\n            color: getRainfallColor(numValue),\n            icon: \"🌧️\",\n            category: \"rainfall\",\n        };\n    } else if (paramKey.startsWith(\"T\")) {\n        const tempType = paramKey.includes(\"tb\") ? \"Ttb\" : paramKey.includes(\"x\") ? \"Tx\" : \"Tm\";\n        const icon = numValue > 30 ? \"🌡️\" : numValue < 20 ? \"❄️\" : \"🌡️\";\n\n        return {\n            label: unitMap[tempType].content,\n            value: numValue,\n            unit: unitMap[tempType].donvi,\n            color: getTemperatureColor(numValue),\n            icon: icon,\n            category: \"temperature\",\n        };\n    } else if (paramKey.startsWith(\"H\")) {\n        const humidityType = paramKey.includes(\"tb\") ? \"Htb\" : paramKey.includes(\"x\") ? \"Hx\" : \"Hm\";\n\n        return {\n            label: unitMap[humidityType].content,\n            value: numValue,\n            unit: unitMap[humidityType].donvi,\n            color: getHumidityColor(numValue),\n            icon: \"💧\",\n            category: \"humidity\",\n        };\n    }\n\n    return {\n        label: paramKey,\n        value: numValue,\n        unit: \"\",\n        color: \"#6c757d\",\n        icon: \"📊\",\n        category: \"unknown\",\n    };\n};\n\n// Helper function to get readable parameter labels\nconst getParameterLabel = (paramKey) => {\n    const labelMap = {\n        // Rainfall\n        R_AP: \"An Phú\",\n        R_BC: \"Bình Chánh\",\n        R_CG: \"Cần Giờ\",\n        R_CL: \"Cát Lái\",\n        R_CC: \"Củ Chi\",\n        R_HM: \"Hóc Môn\",\n        R_LMX: \"Lê Minh Xuân\",\n        R_LS: \"Long Sơn\",\n        R_MDC: \"Mạc Đĩnh Chi\",\n        R_NB: \"Nhà Bè\",\n        R_PVC: \"Phạm Văn Cội\",\n        R_TTH: \"Tam Thôn Hiệp\",\n        R_TD: \"Thủ Đức\",\n        R_TSH: \"Tân Sơn Hòa\",\n        Ttb_TSH: \"Nhiệt độ không khí trung bình\",\n        Tx_TSH: \"Nhiệt độ không khí cao nhất\",\n        Tm_TSH: \"Nhiệt độ không khí thấp nhất\",\n\n        // Humidity (tb=trung bình, x=max, m=min)\n        Htb_NB: \"Mực nước trung bình\",\n        Hx_NB: \"Mực nước cao nhất\",\n        Hm_NB: \"Mực nước thấp nhất\",\n        Htb_PA: \"Mực nước trung bình\",\n        Hx_PA: \"Mực nước cao nhất\",\n        Hm_PA: \"Mực nước thấp nhất\",\n    };\n\n    return labelMap[paramKey] || paramKey;\n};\n\n// Basic popup for stations without data\nconst createBasicPopup = (station, message) => {\n    return `\n    <div class=\"modern-popup hydromet-popup basic\">\n      <div class=\"popup-header\">\n        <div class=\"popup-icon\">🌤️</div>\n        <div class=\"popup-title\">\n          <h4 class=\"popup-name\">${station.TenTam || station.TenTram}</h4>\n          <span class=\"popup-type\">Trạm khí tượng thủy văn</span>\n        </div>\n        <div class=\"popup-status status-no-data\">\n          ${message}\n        </div>\n      </div>\n      \n      <div class=\"popup-content\">\n        <div class=\"popup-details\">\n          <div class=\"detail-grid\">\n            <div class=\"detail-item\">\n              <div class=\"detail-content\">\n                <strong class=\"detail-label\"><i class=\"detail-icon\">🏷️</i> Phân loại:</strong>\n                <span class=\"detail-value\">${station.PhanLoai || \"Không xác định\"}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n};\n\n// Enhanced rendering function with improved data processing\nexport const renderHydrometStations = async (mapInstance, setHydrometData, setSelectedStation) => {\n    try {\n        console.log(\"🔍 Starting to render hydromet stations...\");\n        const stations = await fetchHydrometStations();\n        console.log(`📍 Fetched ${stations.length} hydromet stations`);\n\n        const latLngs = [];\n\n        for (const station of stations) {\n            const lat = convertDMSToDecimalNo(station.ViDo);\n            const lng = convertDMSToDecimalNo(station.KinhDo);\n\n            if (lat == null || lng == null || isNaN(lat) || isNaN(lng)) {\n                console.warn(`⚠️ Không thể chuyển tọa độ tại trạm ${station.TenTram}`);\n                continue;\n            }\n\n            // Fetch hydromet data for this station\n            const hydrometeorologyData = await fetchHydrometData(station.KiHieu);\n            console.log(`📊 Station ${station.KiHieu} data:`, hydrometeorologyData);\n\n            // Process the latest data to extract parameters\n            let stationData = {\n                rainfall: 0,\n                temperature: 0,\n                humidity: 0,\n                hasData: false,\n            };\n\n            if (hydrometeorologyData && hydrometeorologyData.length > 0) {\n                const latestRecord = hydrometeorologyData[hydrometeorologyData.length - 1];\n\n                // Extract rainfall data (sum all R_ parameters)\n                const rainfallKeys = Object.keys(latestRecord).filter((key) => key.startsWith(\"R_\"));\n                stationData.rainfall = rainfallKeys.reduce((sum, key) => {\n                    const value = parseFloat(latestRecord[key]) || 0;\n                    return sum + value;\n                }, 0);\n\n                // Extract temperature data (prioritize average, then max, then min)\n                const tempKeys = Object.keys(latestRecord).filter((key) => key.startsWith(\"T\"));\n                const tempAvgKey = tempKeys.find((key) => key.includes(\"tb\"));\n                const tempMaxKey = tempKeys.find((key) => key.includes(\"x\"));\n                const tempMinKey = tempKeys.find((key) => key.includes(\"m\"));\n\n                if (tempAvgKey) {\n                    stationData.temperature = parseFloat(latestRecord[tempAvgKey]) || 0;\n                } else if (tempMaxKey) {\n                    stationData.temperature = parseFloat(latestRecord[tempMaxKey]) || 0;\n                } else if (tempMinKey) {\n                    stationData.temperature = parseFloat(latestRecord[tempMinKey]) || 0;\n                }\n\n                // Extract humidity data (prioritize average)\n                const humidityKeys = Object.keys(latestRecord).filter((key) => key.startsWith(\"H\"));\n                const humidityAvgKey = humidityKeys.find((key) => key.includes(\"tb\"));\n                const humidityMaxKey = humidityKeys.find((key) => key.includes(\"x\"));\n                const humidityMinKey = humidityKeys.find((key) => key.includes(\"m\"));\n\n                if (humidityAvgKey) {\n                    stationData.humidity = parseFloat(latestRecord[humidityAvgKey]) || 0;\n                } else if (humidityMaxKey) {\n                    stationData.humidity = parseFloat(latestRecord[humidityMaxKey]) || 0;\n                } else if (humidityMinKey) {\n                    stationData.humidity = parseFloat(latestRecord[humidityMinKey]) || 0;\n                }\n\n                stationData.hasData = true;\n            }\n\n            // Create enhanced icon based on all parameters\n            const icon = getHydrometIcon(stationData);\n\n            const marker = L.marker([lat, lng], {\n                icon,\n                isHydrometStation: true,\n            }).addTo(mapInstance);\n\n            latLngs.push([lat, lng]);\n\n            // Enhanced tooltip with primary info\n            const tooltipText = stationData.hasData\n                ? `${station.TenTam} - ${\n                      stationData.rainfall > 0\n                          ? `Mưa: ${stationData.rainfall.toFixed(1)}mm`\n                          : `${stationData.temperature.toFixed(1)}°C`\n                  }`\n                : station.TenTam;\n\n            marker.bindTooltip(tooltipText, {\n                permanent: true,\n                direction: \"top\",\n                offset: [0, -15],\n                className: \"custom-tooltip enhanced-tooltip\",\n            });\n\n            marker.on(\"click\", () => {\n                try {\n                    const zoomLevel = 13;\n                    const clickLat = convertDMSToDecimalNo(station.ViDo);\n                    const clickLng = convertDMSToDecimalNo(station.KinhDo);\n\n                    if (clickLat !== null && clickLng !== null) {\n                        const clickLatLng = L.latLng(clickLat, clickLng);\n                        const map = mapInstance;\n                        const originalPoint = map.latLngToContainerPoint(clickLatLng);\n                        const offsetPixels = L.point(0, 70);\n                        const newPoint = originalPoint.subtract(offsetPixels);\n                        const newLatLng = map.containerPointToLatLng(newPoint);\n                        map.setView(newLatLng, zoomLevel, {\n                            animate: true,\n                        });\n                    }\n\n                    // Create enhanced popup with all parameters\n                    const popupHTML = createHydrometPopup(station, hydrometeorologyData);\n\n                    marker.bindPopup(popupHTML, {\n                        maxWidth: 400,\n                        className: \"custom-popup enhanced-popup\",\n                    });\n                    marker.openPopup();\n\n                    // Update component state\n                    setHydrometData(hydrometeorologyData);\n                    setSelectedStation({\n                        maTram: station.KiHieu,\n                        tenTram: station.TenTram,\n                        thongTin: station,\n                        data: stationData,\n                    });\n\n                    marker.once(\"popupclose\", () => {\n                        mapInstance.flyTo([10.769236178832742, 106.42333733153667], 10);\n                    });\n                } catch (error) {\n                    console.error(\"❌ Error in hydromet marker click handler:\", error);\n                }\n            });\n        }\n\n        if (latLngs.length > 0) {\n            const bounds = L.latLngBounds(latLngs);\n            mapInstance.fitBounds(bounds, {\n                padding: [50, 50],\n                animate: true,\n            });\n        }\n\n        console.log(\"✅ Successfully rendered all hydromet stations with enhanced UI\");\n    } catch (error) {\n        console.error(\"❌ Error rendering hydromet stations:\", error);\n    }\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\map\\SalinityMarkers.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport L from \"leaflet\";\nimport { convertDMSToDecimal } from \"@components/convertDMSToDecimal\";\nimport { fetchSalinityPoints, fetchSalinityData } from \"@components/map/mapDataServices\";\n\nconst getSalinityIcon = (salinity) => {\n    let color = \"#6c757d\";\n\n    if (salinity < 1) color = \"blue\";\n    else if (salinity < 4) color = \"green\";\n    else if (salinity < 10) color = \"yellow\";\n    else color = \"red\";\n\n    return L.divIcon({\n        className: \"custom-salinity-icon\",\n        html: `\n      <i class=\"fa-solid fa-droplet glow-icon\" style=\"color: ${color}; font-size: 1.5rem;\"></i>\n    `,\n        iconSize: [20, 20],\n        iconAnchor: [10, 10],\n        popupAnchor: [0, -10],\n    });\n};\n\nexport const createSalinityPopup = (point, latestSalinity, latestDate, trend, previousDate) => {\n    console.log(`point:`, point);\n    console.log(`latestSalinity:`, latestSalinity);\n    console.log(`latestDate:`, latestDate);\n    console.log(`trend:`, trend);\n    console.log(`previousDate:`, previousDate);\n\n    const formattedSalinity = `${(+latestSalinity).toFixed(2)}`;\n    const salinityValue = +latestSalinity;\n\n    // Determine status and color based on salinity level\n    let statusClass = \"status-normal\";\n    let statusText = \"Bình thường\";\n    let statusColor = \"#198754\";\n\n    if (salinityValue >= 10) {\n        statusClass = \"status-critical\";\n        statusText = \"Rủi ro cao\";\n        statusColor = \"#dc3545\";\n    } else if (salinityValue >= 4) {\n        statusClass = \"status-warning\";\n        statusText = \"Cảnh báo\";\n        statusColor = \"#fd7e14\";\n    } else if (salinityValue >= 1) {\n        statusClass = \"status-caution\";\n        statusText = \"Theo dõi\";\n        statusColor = \"#ffc107\";\n    }\n\n    return `\n    <div class=\"modern-popup salinity-popup\">\n      <div class=\"popup-header\">\n        <div class=\"popup-icon\">🌊</div>\n        <div class=\"popup-title\">\n          <h4 class=\"popup-name\">${point.TenDiem}</h4>\n          <span class=\"popup-type\">Điểm đo độ mặn</span>\n        </div>\n        <div class=\"popup-status ${statusClass}\">\n          ${statusText}\n        </div>\n      </div>\n      \n      <div class=\"popup-content\">\n        <div class=\"popup-main-value\">\n          <span class=\"value-label\">Độ mặn hiện tại</span>\n          <span class=\"value-number\" style=\"color: ${statusColor}\">\n            ${formattedSalinity} ‰\n          </span>\n          <span class=\"value-date\">${latestDate}</span>\n        </div>\n        \n        ${\n            trend\n                ? `\n          <div class=\"trend-indicator\">\n            <div class=\"trend-icon\" style=\"color: ${trend.color}\">\n              ${trend.icon}\n            </div>\n            <div class=\"trend-content\">\n              <span class=\"trend-text\" style=\"color: ${trend.color}\">\n                ${trend.text}\n              </span>\n              <span class=\"trend-date\">${previousDate}</span>\n            </div>\n          </div>\n        `\n                : \"\"\n        }\n        \n        <div class=\"popup-details\">\n          <div class=\"detail-grid\">\n            <div class=\"detail-item\">\n              <div class=\"detail-content py-2\">\n                <strong class=\"detail-label\"><i class=\"detail-icon\">🏷️</i> Phân loại: </strong>\n                <span class=\"detail-value\">${point.PhanLoai}</span>\n              </div>\n            </div>\n            \n            <div class=\"detail-item\">\n              <div class=\"detail-content py-2\">\n                <strong class=\"detail-label font-weight\"><i class=\"detail-icon\">⏰</i> Thời gian: </strong>\n                <span class=\"detail-value\">${point.ThoiGian}</span>\n              </div>\n            </div>\n            \n            <div class=\"detail-item\">\n              <div class=\"detail-content py-2\">\n                <strong class=\"detail-label\"><i class=\"detail-icon\">📊</i> Tần suất đo: </strong>\n                <span class=\"detail-value\">${point.TanSuat}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"popup-actions\">\n          <button class=\"action-btn primary\" onclick=\"window.openChartDetails('${point.KiHieu}')\">\n            <i class=\"btn-icon\">📈</i>\n            Xem biểu đồ chi tiết\n          </button>\n        </div>\n      </div>\n    </div>\n  `;\n};\n\nexport const renderSalinityPoints = async (mapInstance, setSalinityData, setSelectedPoint) => {\n    try {\n        console.log(\"🔍 Starting to render salinity points...\");\n        const points = await fetchSalinityPoints();\n        console.log(`📍 Fetched ${points.length} salinity points`);\n\n        const latLngs = [];\n\n        for (const point of points) {\n            const lat = convertDMSToDecimal(point.ViDo);\n            const lng = convertDMSToDecimal(point.KinhDo);\n\n            if (lat == null || lng == null || isNaN(lat) || isNaN(lng)) {\n                console.warn(`⚠️ Không thể chuyển tọa độ tại điểm ${point.TenDiem}`);\n                continue;\n            }\n\n            const data = await fetchSalinityData(point.KiHieu);\n            let latestSalinity = null;\n            let previousSalinity = null;\n            let latestDate = null;\n            let previousDate = null;\n            let trend = null;\n\n            // Find latest and previous salinity values\n            for (let i = data.length - 1; i >= 0; i--) {\n                if (\n                    data[i].salinity !== \"NULL\" &&\n                    data[i].salinity !== null &&\n                    data[i].salinity !== undefined\n                ) {\n                    if (latestSalinity === null) {\n                        latestSalinity = data[i].salinity;\n                        latestDate = new Date(data[i].date).toLocaleDateString(\"vi-VN\");\n                    } else if (previousSalinity === null) {\n                        previousSalinity = data[i].salinity;\n                        previousDate = new Date(data[i].date).toLocaleDateString(\"vi-VN\");\n                        break;\n                    }\n                }\n            }\n\n            if (latestSalinity !== null && previousSalinity !== null) {\n                const diff = latestSalinity - previousSalinity;\n                trend = {\n                    text:\n                        diff > 0\n                            ? `Tăng ${diff.toFixed(2)} ‰ so với `\n                            : diff < 0\n                              ? `Giảm ${Math.abs(diff).toFixed(2)} ‰ so với`\n                              : \"Không thay đổi so với\",\n                    color: diff > 0 ? \"#dc3545\" : diff < 0 ? \"#198754\" : \"#6c757d\",\n                    icon: diff > 0 ? \"▲\" : diff < 0 ? \"▼\" : \"■\",\n                };\n            }\n\n            const icon = getSalinityIcon(latestSalinity);\n\n            const marker = L.marker([lat, lng], {\n                icon,\n                isSalinityPoint: true,\n            }).addTo(mapInstance);\n\n            latLngs.push([lat, lng]);\n\n            marker.bindTooltip(point.TenDiem, {\n                permanent: true,\n                direction: \"top\",\n                offset: [0, -10],\n                className: \"custom-tooltip\",\n            });\n\n            marker.on(\"click\", () => {\n                try {\n                    console.log(`🖱️ Marker clicked for point: ${point.TenDiem}`);\n                    const zoomLevel = 13;\n                    const clickLat = convertDMSToDecimal(point.ViDo.trim());\n                    const clickLng = convertDMSToDecimal(point.KinhDo.trim());\n                    if (clickLat !== null && clickLng !== null) {\n                        const clickLatLng = L.latLng(clickLat, clickLng);\n                        const map = mapInstance;\n                        const originalPoint = map.latLngToContainerPoint(clickLatLng);\n                        const offsetPixels = L.point(0, 70);\n                        const newPoint = originalPoint.subtract(offsetPixels);\n                        const newLatLng = map.containerPointToLatLng(newPoint);\n                        map.setView(newLatLng, zoomLevel, {\n                            animate: true,\n                        });\n                    }\n\n                    const popupHTML = createSalinityPopup(\n                        point,\n                        latestSalinity,\n                        latestDate,\n                        trend,\n                        previousDate,\n                    );\n                    console.log(\"🔥 Full popup HTML:\\n\", popupHTML);\n\n                    marker.bindPopup(popupHTML, {\n                        maxWidth: 300,\n                        className: \"custom-popup\",\n                    });\n                    marker.openPopup();\n                    setSalinityData(data);\n                    setSelectedPoint({\n                        kiHieu: point.KiHieu,\n                        tenDiem: point.TenDiem,\n                        thongTin: point,\n                    });\n                    marker.once(\"popupclose\", () => {\n                        mapInstance.flyTo([10.769236178832742, 106.42333733153667], 10);\n                    });\n                } catch (error) {\n                    console.error(\"❌ Error in marker click handler:\", error);\n                }\n            });\n        }\n\n        if (latLngs.length > 0) {\n            const bounds = L.latLngBounds(latLngs);\n            mapInstance.fitBounds(bounds, {\n                padding: [50, 50],\n                animate: true,\n            });\n        }\n\n        console.log(\"✅ Successfully rendered all salinity points\");\n    } catch (error) {\n        console.error(\"❌ Error rendering salinity points:\", error);\n    }\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\map\\mapDataServices.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'parseDDMMYYYY' is assigned a value but never used.","line":3,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"parseDDMMYYYY"},"fix":{"range":[51,277],"text":""},"desc":"Remove unused variable 'parseDDMMYYYY'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axiosInstance from \"@config/axios-config\";\n\nconst parseDDMMYYYY = (str) => {\n    if (!str) return null;\n    const [day, month, year] = str.split(\"/\").map((s) => parseInt(s, 10));\n    if (!day || !month || !year) return null;\n    return new Date(year, month - 1, day);\n};\n\nexport const fetchSalinityPoints = async () => {\n    try {\n        const response = await axiosInstance.get(\"/api/salinity-points\");\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching salinity points:\", error);\n        return [];\n    }\n};\n\nexport const fetchSalinityData = async (kiHieu) => {\n    try {\n        const response = await axiosInstance.get(`/api/salinity-data/${kiHieu}`);\n        const formatted = response.data.map((item) => ({\n            date: new Date(item.Ngày).toISOString(),\n            salinity: item.DoMan,\n        }));\n        formatted.sort((a, b) => new Date(a.date) - new Date(b.date));\n        return formatted;\n    } catch (error) {\n        console.error(\"Error fetching salinity data:\", error);\n        return [];\n    }\n};\n\nexport const fetchHydrometStations = async () => {\n    try {\n        const response = await axiosInstance.get(\"/api/hydrometeorology-station\");\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching hydrometeorology stations:\", error);\n        return [];\n    }\n};\n\nexport const fetchHydrometData = async (maTram) => {\n    try {\n        const response = await axiosInstance.get(`/api/hydrometeorology-data/${maTram}`);\n\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching hydromet data:\", error);\n        return [];\n    }\n};\n\nexport const fetchSalinityStationPositions = async (salinityData) => {\n    const promises = [];\n    const dataItem = salinityData[0];\n    const date = dataItem?.Ngày;\n\n    const kiHieuList = Object.keys(dataItem).filter(\n        (key) =>\n            key !== \"Ngày\" &&\n            key !== \"id\" &&\n            dataItem[key] !== \"NULL\" &&\n            dataItem[key] !== null &&\n            dataItem[key] !== undefined,\n    );\n\n    for (const kiHieu of kiHieuList) {\n        const value = dataItem[kiHieu];\n        promises.push(\n            axiosInstance.get(`/api/station-position-salinity/${kiHieu}`).then((res) => ({\n                kiHieu,\n                value,\n                position: res.data,\n                date,\n            })),\n        );\n    }\n\n    return Promise.all(promises);\n};\n\nexport const fetchHydrometeorologyStationPositions = async (hydrometeorology) => {\n    const promises = [];\n    const dataItem = hydrometeorology[0];\n    const date = dataItem?.Ngày;\n\n    const kiHieuList = Object.keys(dataItem).filter(\n        (key) => key !== \"Ngày\" && key !== \"id\" && dataItem[key] !== \"NULL\" && dataItem[key] !== null,\n    );\n\n    for (const kiHieu of kiHieuList) {\n        const value = dataItem[kiHieu];\n        promises.push(\n            axiosInstance.get(`/api/station-position-hydrometeorology/${kiHieu}`).then((res) => ({\n                kiHieu,\n                value,\n                position: res.data,\n                date,\n            })),\n        );\n    }\n\n    return Promise.all(promises);\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\map\\mapInitialization.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\map\\mapMarkers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\map\\mapStyles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\components\\map\\mapUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\config\\axios-config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\main.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\about\\AboutMe.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":60,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2467,2695],"text":"\n                                        &quot;Phát triển WebGIS giám sát và cảnh báo xâm nhập mặn trên hệ thống\n                                        sông, kênh, rạch tại Thành phố Hồ Chí Minh\"\n                                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2467,2695],"text":"\n                                        &ldquo;Phát triển WebGIS giám sát và cảnh báo xâm nhập mặn trên hệ thống\n                                        sông, kênh, rạch tại Thành phố Hồ Chí Minh\"\n                                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2467,2695],"text":"\n                                        &#34;Phát triển WebGIS giám sát và cảnh báo xâm nhập mặn trên hệ thống\n                                        sông, kênh, rạch tại Thành phố Hồ Chí Minh\"\n                                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2467,2695],"text":"\n                                        &rdquo;Phát triển WebGIS giám sát và cảnh báo xâm nhập mặn trên hệ thống\n                                        sông, kênh, rạch tại Thành phố Hồ Chí Minh\"\n                                    "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":61,"column":83,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2467,2695],"text":"\n                                        \"Phát triển WebGIS giám sát và cảnh báo xâm nhập mặn trên hệ thống\n                                        sông, kênh, rạch tại Thành phố Hồ Chí Minh&quot;\n                                    "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2467,2695],"text":"\n                                        \"Phát triển WebGIS giám sát và cảnh báo xâm nhập mặn trên hệ thống\n                                        sông, kênh, rạch tại Thành phố Hồ Chí Minh&ldquo;\n                                    "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2467,2695],"text":"\n                                        \"Phát triển WebGIS giám sát và cảnh báo xâm nhập mặn trên hệ thống\n                                        sông, kênh, rạch tại Thành phố Hồ Chí Minh&#34;\n                                    "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2467,2695],"text":"\n                                        \"Phát triển WebGIS giám sát và cảnh báo xâm nhập mặn trên hệ thống\n                                        sông, kênh, rạch tại Thành phố Hồ Chí Minh&rdquo;\n                                    "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport Header from \"@pages/themes/headers/Header\";\nimport Footer from \"@pages/themes/footer/Footer\";\nimport Banner from \"@components/Banner\";\nimport bannerAbout from \"@assets/bannerAbout.jpg\";\n\nconst AboutMe = () => {\n    const researchObjectives = [\n        {\n            icon: \"🗺️\",\n            title: \"Xây dựng CSDL không gian\",\n            description: \"Thiết lập cơ sở dữ liệu không gian toàn diện để giám sát và cảnh báo xâm nhập mặn.\",\n        },\n        {\n            icon: \"🌊\",\n            title: \"Phát triển WebGIS\",\n            description: \"Xây dựng hệ thống WebGIS hiện đại hỗ trợ theo dõi độ mặn theo thời gian thực.\",\n        },\n        {\n            icon: \"⚡\",\n            title: \"Cảnh báo tự động\",\n            description: \"Thiết lập cơ chế thông báo tự động khi độ mặn vượt ngưỡng an toàn cho phép.\",\n        },\n        {\n            icon: \"📊\",\n            title: \"Trực quan hóa dữ liệu\",\n            description: \"Hiển thị dữ liệu thủy văn một cách trực quan, hỗ trợ ra quyết định hiệu quả.\",\n        },\n    ];\n\n    return (\n        <div className=\"about-container\">\n            <Helmet>\n                <title>Giới thiệu | Xâm nhập mặn Tp. Hồ Chí Minh</title>\n            </Helmet>\n            <Header />\n\n            <Banner\n                backgroundImage={bannerAbout}\n                title=\"GIỚI THIỆU KHÓA LUẬN\"\n                description=\"Khóa luận tốt nghiệp được thực hiện bởi Nguyễn Võ Yến Linh dưới sự hướng dẫn của ThS. Nguyễn Duy Liêm.\"\n            />\n\n            <main className=\"about-content\">\n                {/* Introduction Section */}\n                <section className=\"introduction-section\">\n                    <div className=\"section-content\">\n                        <h2>Tổng quan nghiên cứu</h2>\n                        <div className=\"content-wrapper\">\n                            <div className=\"text-content\">\n                                <p className=\"highlight-text\">\n                                    Xâm nhập mặn là một trong những thách thức nghiêm trọng đối với hệ thống\n                                    sông, kênh, rạch tại Thành phố Hồ Chí Minh, ảnh hưởng đến nguồn nước ngọt\n                                    và đời sống người dân.\n                                </p>\n                                <p>\n                                    Trước thực trạng này, khóa luận{\" \"}\n                                    <strong>\n                                        \"Phát triển WebGIS giám sát và cảnh báo xâm nhập mặn trên hệ thống\n                                        sông, kênh, rạch tại Thành phố Hồ Chí Minh\"\n                                    </strong>{\" \"}\n                                    được thực hiện nhằm xây dựng một hệ thống giám sát thông minh, hỗ trợ quản\n                                    lý tài nguyên nước và đưa ra cảnh báo kịp thời.\n                                </p>\n                            </div>\n                            <div className=\"stats-grid\">\n                                <div className=\"stat-card\">\n                                    <span className=\"stat-icon\">📍</span>\n                                    <h3>Phạm vi</h3>\n                                    <p>TP. Hồ Chí Minh</p>\n                                </div>\n                                <div className=\"stat-card\">\n                                    <span className=\"stat-icon\">📅</span>\n                                    <h3>Thời gian</h3>\n                                    <p>2007 - 2024</p>\n                                </div>\n                                <div className=\"stat-card\">\n                                    <span className=\"stat-icon\">🎯</span>\n                                    <h3>Đối tượng</h3>\n                                    <p>Xâm nhập mặn</p>\n                                </div>\n                                <div className=\"stat-card\">\n                                    <span className=\"stat-icon\">💡</span>\n                                    <h3>Giải pháp</h3>\n                                    <p>WebGIS</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n\n                {/* Objectives Section */}\n                <section className=\"objectives-section\">\n                    <div className=\"section-content\">\n                        <h2>Mục tiêu nghiên cứu</h2>\n                        <div className=\"objectives-grid\">\n                            {researchObjectives.map((objective, index) => (\n                                <div className=\"objective-card\" key={index}>\n                                    <span className=\"objective-icon\">{objective.icon}</span>\n                                    <h3>{objective.title}</h3>\n                                    <p>{objective.description}</p>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                </section>\n\n                {/* Team Section */}\n                <section className=\"team-section\">\n                    <div className=\"section-content\">\n                        <h2>Đội ngũ thực hiện</h2>\n                        <div className=\"team-grid\">\n                            <div className=\"team-card student\">\n                                <div className=\"card-content\">\n                                    <h3>Sinh viên thực hiện</h3>\n                                    <div className=\"member-name\">Nguyễn Võ Yến Linh</div>\n                                    <div className=\"member-role\">Khoa Môi trường và Tài nguyên</div>\n                                </div>\n                            </div>\n                            <div className=\"team-card advisor\">\n                                <div className=\"card-content\">\n                                    <h3>Giảng viên hướng dẫn</h3>\n                                    <div className=\"member-name\">ThS. Nguyễn Duy Liêm</div>\n                                    <div className=\"member-role\">Khoa Môi trường và Tài nguyên</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n            </main>\n\n            <Footer />\n        </div>\n    );\n};\n\nexport default AboutMe;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\feedback\\Feedback.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":68,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport Header from \"@pages/themes/headers/Header\";\nimport { ToastCommon } from \"@components/ToastCommon\";\nimport { TOAST } from \"@common/constants\";\nimport axiosInstance from \"@config/axios-config\";\nimport { hideLoading, showLoading } from \"@stores/actions/appAction\";\nimport Footer from \"@pages/themes/footer/Footer\";\n\nconst Feedback = () => {\n    const [errors, setErrors] = useState({});\n    const [isUpdate, setIsUpdate] = useState(false);\n    const [formData, setFormData] = useState({\n        name: \"\",\n        email: \"\",\n        rating: 0,\n        message: \"\",\n    });\n\n    useEffect(() => {\n        if (formData.email) {\n            checkEmailExists(formData.email);\n        }\n    }, [formData.email]);\n\n    const handleChange = (e) => {\n        setFormData({ ...formData, [e.target.name]: e.target.value });\n    };\n\n    const handleRating = (value) => {\n        setFormData((prev) => ({ ...prev, rating: value }));\n    };\n\n    const validate = () => {\n        let newErrors = {};\n        const { name, email, message, rating } = formData;\n\n        if (!name.trim()) newErrors.name = \"Vui lòng nhập tên của bạn.\";\n\n        if (!email.trim()) {\n            newErrors.email = \"Vui lòng nhập email.\";\n        } else if (!/^[^\\s@]+@[^\\s@]+\\.[a-zA-Z]{2,}$/.test(email)) {\n            newErrors.email = \"Email không hợp lệ.\";\n        }\n\n        if (!message.trim()) {\n            newErrors.message = \"Vui lòng nhập nội dung tin nhắn.\";\n        }\n\n        if (!rating || rating < 1) {\n            newErrors.rating = \"Vui lòng chọn mức đánh giá.\";\n        }\n\n        return newErrors;\n    };\n\n    const checkEmailExists = async (email) => {\n        try {\n            const response = await axiosInstance.get(\n                import.meta.env.VITE_BASE_URL + `/api/feedback/${email}`,\n            );\n            if (response.data) {\n                setFormData(response.data);\n                setIsUpdate(true);\n            } else {\n                setIsUpdate(false);\n            }\n        } catch (error) {\n            setIsUpdate(false);\n        }\n    };\n\n    // Gửi dữ liệu lên server bằng Axios\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setErrors({});\n        const newErrors = validate();\n\n        if (Object.keys(newErrors).length > 0) {\n            setErrors(newErrors);\n            return;\n        }\n\n        try {\n            showLoading();\n            if (isUpdate) {\n                await axiosInstance.put(\n                    import.meta.env.VITE_BASE_URL + `/api/feedback/${formData.email}`,\n                    formData,\n                );\n                ToastCommon(TOAST.SUCCESS, \"Cập nhật thành công!\");\n            } else {\n                await axiosInstance.post(import.meta.env.VITE_BASE_URL + \"/api/feedback\", formData);\n                ToastCommon(TOAST.SUCCESS, \"Tin nhắn đã được gửi thành công!\");\n            }\n\n            setFormData({ name: \"\", email: \"\", rating: 0, message: \"\" });\n            setIsUpdate(false);\n        } catch (error) {\n            ToastCommon(TOAST.ERROR, error.response?.data?.message || \"Lỗi hệ thống!\");\n        } finally {\n            hideLoading();\n        }\n    };\n\n    return (\n        <div className=\"feedback-page\">\n            <Helmet>\n                <title>Góp ý & Đánh giá | Xâm nhập mặn Tp. Hồ Chí Minh</title>\n            </Helmet>\n            <Header />\n\n            <main className=\"feedback-main\">\n                <div className=\"feedback-container\">\n                    <div className=\"feedback-content\">\n                        <div className=\"feedback-header\">\n                            <h1>Góp ý & Đánh giá</h1>\n                            <p>Chia sẻ ý kiến của bạn để giúp chúng tôi cải thiện hệ thống tốt hơn</p>\n                        </div>\n\n                        <form onSubmit={handleSubmit} className=\"feedback-form\">\n                            <div className=\"form-group\">\n                                <div className=\"input-wrapper\">\n                                    <label htmlFor=\"name\">\n                                        <i className=\"fas fa-user\"></i>\n                                        <span>Họ và tên</span>\n                                    </label>\n                                    <input\n                                        id=\"name\"\n                                        type=\"text\"\n                                        name=\"name\"\n                                        value={formData.name}\n                                        onChange={handleChange}\n                                        className={errors.name ? \"error\" : \"\"}\n                                        placeholder=\"Nhập họ và tên của bạn\"\n                                    />\n                                    {errors.name && <div className=\"error-message\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"input-wrapper\">\n                                    <label htmlFor=\"email\">\n                                        <i className=\"fas fa-envelope\"></i>\n                                        <span>Email</span>\n                                    </label>\n                                    <input\n                                        id=\"email\"\n                                        type=\"email\"\n                                        name=\"email\"\n                                        value={formData.email}\n                                        onChange={handleChange}\n                                        className={errors.email ? \"error\" : \"\"}\n                                        placeholder=\"Nhập địa chỉ email của bạn\"\n                                    />\n                                    {errors.email && <div className=\"error-message\">{errors.email}</div>}\n                                </div>\n                            </div>\n\n                            <div className=\"rating-wrapper\">\n                                <label>\n                                    <i className=\"fas fa-star\"></i>\n                                    <span>Đánh giá của bạn</span>\n                                </label>\n                                <div className=\"rating-stars\">\n                                    {[1, 2, 3, 4, 5].map((star) => (\n                                        <button\n                                            key={star}\n                                            type=\"button\"\n                                            className={`star-button ${\n                                                formData.rating >= star ? \"selected\" : \"\"\n                                            }`}\n                                            onClick={() => handleRating(star)}\n                                        >\n                                            <i className=\"fas fa-star\"></i>\n                                        </button>\n                                    ))}\n                                </div>\n                                {errors.rating && <div className=\"error-message\">{errors.rating}</div>}\n                            </div>\n\n                            <div className=\"input-wrapper\">\n                                <label htmlFor=\"message\">\n                                    <i className=\"fas fa-comment-alt\"></i>\n                                    <span>Nội dung góp ý</span>\n                                </label>\n                                <textarea\n                                    id=\"message\"\n                                    name=\"message\"\n                                    rows=\"4\"\n                                    value={formData.message}\n                                    onChange={handleChange}\n                                    className={errors.message ? \"error\" : \"\"}\n                                    placeholder=\"Chia sẻ ý kiến của bạn về hệ thống...\"\n                                />\n                                {errors.message && <div className=\"error-message\">{errors.message}</div>}\n                            </div>\n\n                            <button type=\"submit\" className=\"submit-button\">\n                                <i className=\"fas fa-paper-plane\"></i>\n                                <span>{isUpdate ? \"Cập nhật góp ý\" : \"Gửi góp ý\"}</span>\n                            </button>\n                        </form>\n\n                        <div className=\"feedback-info\">\n                            <div className=\"info-card\">\n                                <i className=\"fas fa-clock\"></i>\n                                <h3>Phản hồi nhanh</h3>\n                                <p>Chúng tôi sẽ xem xét và phản hồi góp ý của bạn trong thời gian sớm nhất</p>\n                            </div>\n                            <div className=\"info-card\">\n                                <i className=\"fas fa-shield-alt\"></i>\n                                <h3>Bảo mật thông tin</h3>\n                                <p>\n                                    Thông tin của bạn được bảo mật và chỉ được sử dụng để cải thiện hệ thống\n                                </p>\n                            </div>\n                            <div className=\"info-card\">\n                                <i className=\"fas fa-heart\"></i>\n                                <h3>Cảm ơn bạn</h3>\n                                <p>Mọi đóng góp của bạn đều rất quan trọng với sự phát triển của hệ thống</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </main>\n\n            <Footer />\n        </div>\n    );\n};\n\nexport default Feedback;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\home\\FeatureCard.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FeatureCard = ({ icon, title, description, color }) => {\n    return (\n        <div className={`feature-card feature-card--${color}`}>\n            <div className=\"feature-card__icon\">{icon}</div>\n            <div className=\"feature-card__content\">\n                <h3 className=\"feature-card__title\">{title}</h3>\n                <p className=\"feature-card__description\">{description}</p>\n            </div>\n        </div>\n    );\n};\n\nFeatureCard.propTypes = {\n    icon: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    color: PropTypes.string,\n};\n\nexport default FeatureCard;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\home\\Home.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"@pages/themes/headers/Header\";\nimport Footer from \"@pages/themes/footer/Footer\";\nimport FeatureCard from \"@pages/home/FeatureCard\";\n\nconst features = [\n    {\n        icon: \"🌊\",\n        title: \"Giám sát độ mặn\",\n        description: \"Theo dõi và phân tích diễn biến xâm nhập mặn theo thời gian thực.\",\n        color: \"blue\",\n    },\n    {\n        icon: \"📊\",\n        title: \"Phân tích dữ liệu\",\n        description: \"Biểu đồ và thống kê chi tiết về tình hình xâm nhập mặn.\",\n        color: \"green\",\n    },\n    {\n        icon: \"🗺️\",\n        title: \"Bản đồ tương tác\",\n        description: \"Bản đồ WebGIS hiển thị trực quan các điểm đo và khu vực ảnh hưởng.\",\n        color: \"purple\",\n    },\n    {\n        icon: \"⚡\",\n        title: \"Cảnh báo tức thời\",\n        description: \"Thông báo ngay khi độ mặn vượt ngưỡng cho phép.\",\n        color: \"orange\",\n    },\n    {\n        icon: \"📱\",\n        title: \"Truy cập đa nền tảng\",\n        description: \"Sử dụng trên mọi thiết bị với giao diện tối ưu.\",\n        color: \"red\",\n    },\n    {\n        icon: \"📄\",\n        title: \"Báo cáo chuyên sâu\",\n        description: \"Tự động tạo báo cáo với số liệu và biểu đồ chi tiết.\",\n        color: \"teal\",\n    },\n];\n\nconst stats = [\n    {\n        value: \"24/7\",\n        label: \"Giám sát\",\n        description: \"Theo dõi liên tục\",\n        icon: \"⚡\",\n    },\n    {\n        value: \"100+\",\n        label: \"Điểm đo\",\n        description: \"Trên toàn thành phố\",\n        icon: \"📍\",\n    },\n    {\n        value: \"95%\",\n        label: \"Độ chính xác\",\n        description: \"Trong dự báo\",\n        icon: \"📊\",\n    },\n    {\n        value: \"<2p\",\n        label: \"Cập nhật\",\n        description: \"Thời gian thực\",\n        icon: \"⏱️\",\n    },\n];\n\nconst Home = () => {\n    return (\n        <div className=\"home-container\">\n            <Header />\n\n            {/* Hero Section */}\n            <section className=\"hero-section\">\n                <div className=\"hero-content\">\n                    <h1>Hệ thống Giám sát Xâm nhập Mặn</h1>\n                    <p>Giải pháp toàn diện cho việc theo dõi và quản lý tình hình xâm nhập mặn tại TP.HCM</p>\n                    <div className=\"hero-buttons\">\n                        <Link to=\"/ban-do\" className=\"primary-button\">\n                            Xem bản đồ <span className=\"icon\">🗺️</span>\n                        </Link>\n                        <Link to=\"/gioi-thieu\" className=\"secondary-button\">\n                            Tìm hiểu thêm <span className=\"icon\">ℹ️</span>\n                        </Link>\n                    </div>\n                </div>\n                <div className=\"hero-stats\">\n                    {stats.map((stat, index) => (\n                        <div key={index} className=\"stat-card\">\n                            <div className=\"stat-icon\">{stat.icon}</div>\n                            <div className=\"stat-value\">{stat.value}</div>\n                            <div className=\"stat-label\">{stat.label}</div>\n                            <div className=\"stat-description\">{stat.description}</div>\n                        </div>\n                    ))}\n                </div>\n            </section>\n\n            {/* Features Section */}\n            <section className=\"features-section\">\n                <div className=\"section-header\">\n                    <h2>Tính năng nổi bật</h2>\n                    <p>Khám phá các công cụ mạnh mẽ giúp bạn theo dõi và phân tích tình hình xâm nhập mặn</p>\n                </div>\n                <div className=\"features-grid\">\n                    {features.map((feature, index) => (\n                        <FeatureCard\n                            key={index}\n                            icon={feature.icon}\n                            title={feature.title}\n                            description={feature.description}\n                            color={feature.color}\n                        />\n                    ))}\n                </div>\n            </section>\n\n            {/* Call to Action Section */}\n            <section className=\"cta-section\">\n                <div className=\"cta-content\">\n                    <h2>Bắt đầu ngay hôm nay</h2>\n                    <p>\n                        Truy cập bản đồ để xem thông tin chi tiết về tình hình xâm nhập mặn tại khu vực của\n                        bạn\n                    </p>\n                    <Link to=\"/ban-do\" className=\"cta-button\">\n                        Mở bản đồ WebGIS <span className=\"icon\">→</span>\n                    </Link>\n                </div>\n            </section>\n\n            <Footer />\n        </div>\n    );\n};\n\nexport default Home;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\home\\StatsCard.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'icon' is missing in props validation","line":4,"column":22,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":26},{"ruleId":"react/prop-types","severity":2,"message":"'label' is missing in props validation","line":4,"column":28,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":33},{"ruleId":"react/prop-types","severity":2,"message":"'value' is missing in props validation","line":4,"column":35,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":40},{"ruleId":"react/prop-types","severity":2,"message":"'color' is missing in props validation","line":4,"column":42,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":47}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { motion } from \"framer-motion\";\n\nconst StatsCard = ({ icon, label, value, color }) => {\n    return (\n        <motion.div\n            className=\"stat-card\"\n            whileHover={{ scale: 1.05 }}\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.5 }}\n        >\n            <div className=\"stat-icon\" style={{ backgroundColor: color }}>\n                {icon}\n            </div>\n            <h3 className=\"stat-value\">{value.toLocaleString()}</h3>\n            <p className=\"stat-label\">{label}</p>\n        </motion.div>\n    );\n};\n\nexport default StatsCard;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\login\\Login.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\login\\SignUp.jsx","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'react/prop-types').","line":7,"column":1,"severity":1,"nodeType":null,"fix":{"range":[238,282],"text":" "}},{"ruleId":"no-unused-vars","severity":2,"message":"'errorMessage' is assigned a value but never used.","line":10,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"errorMessage"},"fix":{"range":[350,362],"text":""},"desc":"Remove unused variable 'errorMessage'."}]},{"ruleId":"no-undef","severity":2,"message":"'sendVerificationEmail' is not defined.","line":40,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":49}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { signUp } from \"@stores/actions/authActions\";\nimport { ToastCommon } from \"@components/ToastCommon\";\nimport { TOAST } from \"@common/constants\";\n\n// eslint-disable-next-line react/prop-types\nfunction SignUp() {\n    const dispatch = useDispatch();\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const email = useRef(null);\n    const password = useRef(null);\n    const confirmPassword = useRef(null);\n    const name = useRef(null);\n\n    const handleKeyPress = (event, nextFieldRef) => {\n        if (event.key === \"Enter\") {\n            event.preventDefault(); // Ngăn chặn hành vi submit mặc định\n            if (nextFieldRef) {\n                nextFieldRef.current.focus(); // Di chuyển tiêu điểm đến trường tiếp theo\n            } else {\n                handleSignUp(); // Gọi hàm đăng ký nếu đã đến ô cuối\n            }\n        }\n    };\n\n    const handleSignUp = async () => {\n        try {\n            // Gọi action đăng ký\n            await dispatch(\n                signUp({\n                    name: name.current.value,\n                    email: email.current.value,\n                    password: password.current.value,\n                    confirmPassword: confirmPassword.current.value,\n                }),\n            );\n\n            // Sau khi đăng ký thành công, gửi email xác minh\n            await dispatch(sendVerificationEmail(email.current.value));\n\n            ToastCommon(\n                TOAST.SUCCESS,\n                \"Successfully registered! Please check your email to verify your account.\",\n            );\n        } catch (error) {\n            setErrorMessage(error?.response?.data?.message || \"An error occurred during registration.\");\n        }\n    };\n\n    return (\n        <div className=\"signUp\">\n            <form onSubmit={(e) => e.preventDefault()}>\n                <label className=\"labelLogin\" htmlFor=\"chk\" aria-hidden=\"true\">\n                    Đăng ký\n                </label>\n                <input\n                    className=\"inputLogin\"\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    ref={name}\n                    onKeyDown={(e) => handleKeyPress(e, email)}\n                />\n                <input\n                    className=\"inputLogin\"\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    ref={email}\n                    onKeyDown={(e) => handleKeyPress(e, password)}\n                />\n                <input\n                    className=\"inputLogin\"\n                    type=\"password\"\n                    name=\"pswd\"\n                    placeholder=\"Password\"\n                    ref={password}\n                    onKeyDown={(e) => handleKeyPress(e, confirmPassword)}\n                />\n                <input\n                    className=\"inputLogin\"\n                    type=\"password\"\n                    name=\"pswd\"\n                    placeholder=\"Confirm Password\"\n                    ref={confirmPassword}\n                    onKeyDown={(e) => handleKeyPress(e, null)}\n                />\n                <button type=\"button\" className=\"btnLogin btnLoginSubmit\" onClick={() => handleSignUp()}>\n                    Sign up\n                </button>\n            </form>\n        </div>\n    );\n}\n\nexport default SignUp;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\login\\WrapperLogin.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\map\\Map.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"useEffect"},"fix":{"range":[16,26],"text":""},"desc":"Remove unused variable 'useEffect'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport MapboxMap from \"@pages/map/MapboxMap\";\nimport LeftMenuMap from \"@components/LeftMenuMap\";\nimport { Helmet } from \"react-helmet-async\";\nimport axiosInstance from \"@config/axios-config\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { logout } from \"@stores/actions/authActions\";\nimport { NavLink, useNavigate } from \"react-router-dom\";\nimport { ROUTES } from \"@common/constants\";\n\nconst Map = () => {\n    const [sidebarOpen, setSidebarOpen] = useState(true);\n    const [selectedLayers, setSelectedLayers] = useState([]);\n    const [searchResults, setSearchResults] = useState([]);\n    const { userInfo } = useSelector((state) => state.authStore);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [searchText, setSearchText] = useState(\"\");\n    const [selectedLocation, setSelectedLocation] = useState(null);\n    const [highlightedFeature, setHighlightedFeature] = useState(null);\n\n    const handleLogout = () => {\n        dispatch(logout());\n        navigate(ROUTES.home);\n    };\n\n    const handleSearch = async () => {\n        if (!searchText) return;\n        setSearchResults([]);\n        try {\n            const response = await axiosInstance.get(\n                `${import.meta.env.VITE_BASE_URL}/api/search/${encodeURIComponent(searchText)}`,\n            );\n\n            setSearchResults(response.data);\n        } catch (err) {\n            console.log(\"Đã có lỗi xảy ra khi tìm kiếm.\", err);\n        }\n    };\n\n    const onSidebarToggle = () => {\n        setSidebarOpen(!sidebarOpen);\n    };\n\n    const handleLayerToggle = (layerName, checked) => {\n        setSelectedLayers((prevLayers) =>\n            checked ? [...prevLayers, layerName] : prevLayers.filter((l) => l !== layerName),\n        );\n    };\n    return (\n        <div className=\"map-page-container\">\n            <Helmet>\n                <title>Bản đồ | Xâm nhập mặn Tp. Hồ Chí Minh</title>\n            </Helmet>{\" \"}\n            {/* Modern Header */}\n            <header className=\"modern-header\" id=\"headerMap\">\n                <div className=\"header-container\">\n                    {/* Left Section */}\n                    <div className=\"header-left\">\n                        <button className=\"sidebar-toggle\" onClick={onSidebarToggle}>\n                            <i className=\"fa-solid fa-bars\"></i>\n                            <span className=\"toggle-text\">Menu</span>\n                        </button>\n                    </div>\n\n                    {/* Center Section - Search */}\n                    <div className=\"header-center\">\n                        <div className=\"search-container\">\n                            <div className=\"search-input-wrapper\">\n                                <i className=\"fa-solid fa-magnifying-glass search-icon\"></i>\n                                <input\n                                    type=\"text\"\n                                    className=\"search-input\"\n                                    placeholder=\"Tìm kiếm địa điểm, trạm quan trắc...\"\n                                    value={searchText}\n                                    onChange={(e) => setSearchText(e.target.value)}\n                                    onKeyDown={(e) => {\n                                        if (e.key === \"Enter\") {\n                                            handleSearch();\n                                        }\n                                    }}\n                                />\n                                <button className=\"search-button\" onClick={handleSearch}>\n                                    <span>Tìm kiếm</span>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* Right Section - Navigation */}\n                    <div className=\"header-right\">\n                        <nav className=\"header-nav\">\n                            <a\n                                href={ROUTES.home}\n                                className=\"nav-link\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <i className=\"fa-solid fa-house\"></i>\n                                <span>Trang chủ</span>\n                            </a>\n\n                            <NavLink\n                                to={ROUTES.map}\n                                className={({ isActive }) => (isActive ? \"nav-link active\" : \"nav-link\")}\n                            >\n                                <i className=\"fa-solid fa-map-location-dot\"></i>\n                                <span>Bản đồ</span>\n                            </NavLink>\n\n                            {/* User Dropdown */}\n                            <div className=\"user-dropdown\">\n                                <button\n                                    className=\"user-button\"\n                                    data-bs-toggle=\"dropdown\"\n                                    aria-expanded=\"false\"\n                                >\n                                    <div className=\"user-avatar\">\n                                        <i className=\"fa-solid fa-user\"></i>\n                                    </div>\n                                    <div className=\"user-info\">\n                                        <span className=\"user-name\">{userInfo?.name || \"Người dùng\"}</span>\n                                        <span className=\"user-role\">Quản trị viên</span>\n                                    </div>\n                                    <i className=\"fa-solid fa-chevron-down dropdown-arrow\"></i>\n                                </button>\n\n                                <ul className=\"dropdown-menu\">\n                                    <li>\n                                        <NavLink to={ROUTES.setting} className=\"dropdown-item\">\n                                            <i className=\"fa-solid fa-gear\"></i>\n                                            <span>Cài đặt</span>\n                                        </NavLink>\n                                    </li>\n                                    <li>\n                                        <hr className=\"dropdown-divider\" />\n                                    </li>\n                                    <li>\n                                        <button className=\"dropdown-item\" onClick={handleLogout}>\n                                            <i className=\"fa-solid fa-right-from-bracket\"></i>\n                                            <span>Đăng xuất</span>\n                                        </button>\n                                    </li>\n                                </ul>\n                            </div>\n                        </nav>\n\n                        {/* Mobile Menu Toggle */}\n                        <button\n                            className=\"mobile-toggle\"\n                            type=\"button\"\n                            data-bs-toggle=\"collapse\"\n                            data-bs-target=\"#mobileNav\"\n                            aria-controls=\"mobileNav\"\n                            aria-expanded=\"false\"\n                        >\n                            <i className=\"fa-solid fa-ellipsis-vertical\"></i>\n                        </button>\n                    </div>\n                </div>\n\n                {/* Mobile Navigation */}\n                <div className=\"collapse\" id=\"mobileNav\">\n                    <div className=\"mobile-nav\">\n                        <div className=\"mobile-search\">\n                            <div className=\"search-input-wrapper\">\n                                <i className=\"fa-solid fa-magnifying-glass search-icon\"></i>\n                                <input\n                                    type=\"text\"\n                                    className=\"search-input\"\n                                    placeholder=\"Tìm kiếm...\"\n                                    value={searchText}\n                                    onChange={(e) => setSearchText(e.target.value)}\n                                    onKeyDown={(e) => {\n                                        if (e.key === \"Enter\") {\n                                            handleSearch();\n                                        }\n                                    }}\n                                />\n                                <button className=\"search-button\" onClick={handleSearch}>\n                                    <i className=\"fa-solid fa-magnifying-glass\"></i>\n                                </button>\n                            </div>\n                        </div>\n\n                        <div className=\"mobile-links\">\n                            <a\n                                href={ROUTES.home}\n                                className=\"mobile-link\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                <i className=\"fa-solid fa-house\"></i>\n                                <span>Trang chủ</span>\n                            </a>{\" \"}\n                            <NavLink\n                                to={ROUTES.map}\n                                className={({ isActive }) =>\n                                    isActive ? \"mobile-link active\" : \"mobile-link\"\n                                }\n                            >\n                                <i className=\"fa-solid fa-map-location-dot\"></i>\n                                <span>Bản đồ</span>\n                            </NavLink>\n                            <NavLink to={ROUTES.setting} className=\"mobile-link\">\n                                <i className=\"fa-solid fa-gear\"></i>\n                                <span>Cài đặt</span>\n                            </NavLink>\n                            <button className=\"mobile-link logout-link\" onClick={handleLogout}>\n                                <i className=\"fa-solid fa-right-from-bracket\"></i>\n                                <span>Đăng xuất</span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </header>\n            {/* Main Content Area */}\n            <div className=\"map-content\">\n                <LeftMenuMap\n                    sidebarOpen={sidebarOpen}\n                    setSidebarOpen={setSidebarOpen}\n                    onLayerToggle={handleLayerToggle}\n                    searchResults={searchResults}\n                    setSelectedLocation={setSelectedLocation}\n                    setHighlightedFeature={setHighlightedFeature}\n                    highlightedFeature={highlightedFeature}\n                />\n                <div className=\"mapbox-container\">\n                    <MapboxMap\n                        selectedLayers={selectedLayers}\n                        selectedLocation={selectedLocation}\n                        highlightedFeature={highlightedFeature}\n                        setHighlightedFeature={setHighlightedFeature}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Map;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\map\\MapDetails.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'salinityData' is missing in props validation","line":5,"column":26,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":38},{"ruleId":"react/prop-types","severity":2,"message":"'salinityData' is missing in props validation","line":12,"column":23,"nodeType":"Property","messageId":"missingPropType","endLine":12,"endColumn":35},{"ruleId":"react/prop-types","severity":2,"message":"'hydrometData' is missing in props validation","line":12,"column":37,"nodeType":"Property","messageId":"missingPropType","endLine":12,"endColumn":49},{"ruleId":"react/prop-types","severity":2,"message":"'selectedPoint' is missing in props validation","line":12,"column":51,"nodeType":"Property","messageId":"missingPropType","endLine":12,"endColumn":64},{"ruleId":"react/prop-types","severity":2,"message":"'onOpenFullChart' is missing in props validation","line":12,"column":66,"nodeType":"Property","messageId":"missingPropType","endLine":12,"endColumn":81},{"ruleId":"react/prop-types","severity":2,"message":"'onClose' is missing in props validation","line":12,"column":83,"nodeType":"Property","messageId":"missingPropType","endLine":12,"endColumn":90},{"ruleId":"react/prop-types","severity":2,"message":"'salinityData.filter' is missing in props validation","line":14,"column":37,"nodeType":"Identifier","messageId":"missingPropType","endLine":14,"endColumn":43},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":17,"column":45,"nodeType":"Identifier","endLine":17,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedSalinity' is assigned a value but never used.","line":18,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"selectedSalinity"},"fix":{"range":[759,862],"text":""},"desc":"Remove unused variable 'selectedSalinity'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'selectedPoint.tenDiem' is missing in props validation","line":37,"column":65,"nodeType":"Identifier","messageId":"missingPropType","endLine":37,"endColumn":72},{"ruleId":"react/prop-types","severity":2,"message":"'hydrometData.length' is missing in props validation","line":65,"column":47,"nodeType":"Identifier","messageId":"missingPropType","endLine":65,"endColumn":53},{"ruleId":"react/prop-types","severity":2,"message":"'hydrometData.map' is missing in props validation","line":89,"column":47,"nodeType":"Identifier","messageId":"missingPropType","endLine":89,"endColumn":50},{"ruleId":"react/prop-types","severity":2,"message":"'hydrometData.find' is missing in props validation","line":102,"column":70,"nodeType":"Identifier","messageId":"missingPropType","endLine":102,"endColumn":74},{"ruleId":"react/prop-types","severity":2,"message":"'hydrometData.find' is missing in props validation","line":117,"column":72,"nodeType":"Identifier","messageId":"missingPropType","endLine":117,"endColumn":76},{"ruleId":"react/prop-types","severity":2,"message":"'selectedPoint.thongTin' is missing in props validation","line":124,"column":57,"nodeType":"Identifier","messageId":"missingPropType","endLine":124,"endColumn":65},{"ruleId":"react/prop-types","severity":2,"message":"'selectedPoint.thongTin.DonVi' is missing in props validation","line":124,"column":67,"nodeType":"Identifier","messageId":"missingPropType","endLine":124,"endColumn":72}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { InfoCircle, X } from \"react-bootstrap-icons\";\nimport SalinityBarChart from \"@pages/map/SalinityBarChart\";\n\nconst SaltMiniChart = ({ salinityData }) => {\n    return (\n        <div className=\"chart-wrapper rounded shadow-sm border p-2 bg-light\" style={{ transition: \"0.2s\" }}>\n            <SalinityBarChart data={salinityData} height={200} />\n        </div>\n    );\n};\nconst MapDetails = ({ salinityData, hydrometData, selectedPoint, onOpenFullChart, onClose }) => {\n    if (!selectedPoint) return null;\n    const validData = salinityData?.filter(\n        (item) => item.salinity !== null && item.salinity !== \"NULL\" && !isNaN(item.salinity),\n    );\n    const [selectedDate, setSelectedDate] = useState(\"\");\n    const selectedSalinity = validData?.find((item) => item.date.split(\"T\")[0] === selectedDate)?.salinity;\n\n    const startDate = validData?.length > 0 ? new Date(validData[0].date).toLocaleDateString(\"vi-VN\") : null;\n    const endDate =\n        validData?.length > 0\n            ? new Date(validData[validData.length - 1].date).toLocaleDateString(\"vi-VN\")\n            : null;\n\n    return (\n        <div\n            className=\"map-details-container rounded-3 shadow-lg bg-white p-4 animate__animated animate__fadeInRight\"\n            style={{\n                maxHeight: \"100vh\",\n                overflowY: \"auto\",\n            }}\n        >\n            {/* Header */}\n            <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                <div>\n                    <h5 className=\"fw-bold mb-1\">{selectedPoint.tenDiem}</h5>\n                    {startDate && endDate && (\n                        <div className=\"text-muted small\">\n                            Từ <strong>{startDate}</strong> đến <strong>{endDate}</strong>\n                        </div>\n                    )}\n                </div>\n\n                <div className=\"d-flex align-items-center gap-2\">\n                    <InfoCircle size={20} className=\"text-secondary\" title=\"Thông tin điểm đo\" />\n                    <button\n                        className=\"btn btn-sm btn-outline-secondary\"\n                        onClick={onClose}\n                        title=\"Đóng thông tin\"\n                        style={{ lineHeight: 1 }}\n                    >\n                        <X size={18} />\n                    </button>\n                </div>\n            </div>\n\n            <div onClick={onOpenFullChart} style={{ cursor: \"pointer\" }} className=\"hover-shadow\">\n                <SaltMiniChart salinityData={salinityData} />\n                <p className=\"text-center mt-2 text-primary small\">Click để xem chi tiết và xuất dữ liệu</p>\n            </div>\n\n            {/* Hydromet Data Section */}\n            <div className=\"mt-4\">\n                {hydrometData && hydrometData.length > 0 && (\n                    <>\n                        <h6 className=\"fw-bold mb-2\">Yếu tố khí tượng thủy văn</h6>\n                        <div\n                            className=\"chart-wrapper rounded shadow-sm border p-2 bg-light\"\n                            style={{ transition: \"0.2s\" }}\n                        >\n                            <SalinityBarChart data={hydrometData} height={200} />\n                        </div>\n\n                        <div className=\"mt-3\">\n                            <label htmlFor=\"hydro-date-select\" className=\"form-label mb-1 fw-semibold\">\n                                Chọn ngày để xem giá trị\n                            </label>\n                            <select\n                                id=\"hydro-date-select\"\n                                className=\"form-select form-select-sm\"\n                                value={selectedDate}\n                                onChange={(e) => setSelectedDate(e.target.value)}\n                                aria-label=\"Chọn ngày đo khí tượng\"\n                            >\n                                <option value=\"\" disabled>\n                                    -- Chọn ngày --\n                                </option>\n                                {hydrometData.map((d) => (\n                                    <option key={d.date} value={d.date.slice(0, 10)}>\n                                        {new Date(d.date).toLocaleDateString(\"vi-VN\")}\n                                    </option>\n                                ))}\n                            </select>\n\n                            {selectedDate && (\n                                <div\n                                    key={selectedDate}\n                                    className=\"salinity-info mt-2\"\n                                    style={{\n                                        backgroundColor: (() => {\n                                            const val = hydrometData.find(\n                                                (d) => d.date.split(\"T\")[0] === selectedDate,\n                                            )?.hydrometeorology;\n\n                                            if (val == null) return \"#dee2e6\";\n                                            if (val < 10) return \"#0d6efd\"; // xanh dương\n                                            if (val < 30) return \"#ffc107\"; // vàng\n                                            return \"#dc3545\"; // đỏ\n                                        })(),\n                                        color: \"white\",\n                                    }}\n                                >\n                                    Giá trị:{\" \"}\n                                    <span>\n                                        {(() => {\n                                            const value = hydrometData.find(\n                                                (d) => d.date.split(\"T\")[0] === selectedDate,\n                                            )?.hydrometeorology;\n                                            return value != null\n                                                ? Number(value).toFixed(2)\n                                                : \"Không có dữ liệu\";\n                                        })()}{\" \"}\n                                        {selectedPoint?.thongTin?.DonVi || \"\"}\n                                    </span>\n                                </div>\n                            )}\n                        </div>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default MapDetails;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\map\\MapboxMap.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'selectedLayers' is missing in props validation","line":28,"column":22,"nodeType":"Property","messageId":"missingPropType","endLine":28,"endColumn":36},{"ruleId":"react/prop-types","severity":2,"message":"'selectedLocation' is missing in props validation","line":28,"column":38,"nodeType":"Property","messageId":"missingPropType","endLine":28,"endColumn":54},{"ruleId":"react/prop-types","severity":2,"message":"'highlightedFeature' is missing in props validation","line":28,"column":56,"nodeType":"Property","messageId":"missingPropType","endLine":28,"endColumn":74},{"ruleId":"no-unused-vars","severity":2,"message":"'setHighlightedFeature' is defined but never used.","line":28,"column":76,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":97,"suggestions":[{"messageId":"removeVar","data":{"varName":"setHighlightedFeature"},"fix":{"range":[1379,1402],"text":""},"desc":"Remove unused variable 'setHighlightedFeature'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'setHighlightedFeature' is missing in props validation","line":28,"column":76,"nodeType":"Property","messageId":"missingPropType","endLine":28,"endColumn":97},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.","line":112,"column":8,"nodeType":"ArrayExpression","endLine":112,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [map]","fix":{"range":[4586,4588],"text":"[map]"}}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":126,"column":57,"nodeType":"Identifier","messageId":"unusedVar","endLine":126,"endColumn":58,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[5030,5031],"text":""},"desc":"Remove unused variable '_'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'selectedLayers.includes' is missing in props validation","line":141,"column":50,"nodeType":"Identifier","messageId":"missingPropType","endLine":141,"endColumn":58},{"ruleId":"react/prop-types","severity":2,"message":"'selectedLayers.includes' is missing in props validation","line":142,"column":52,"nodeType":"Identifier","messageId":"missingPropType","endLine":142,"endColumn":60},{"ruleId":"react/prop-types","severity":2,"message":"'selectedLayers.forEach' is missing in props validation","line":145,"column":24,"nodeType":"Identifier","messageId":"missingPropType","endLine":145,"endColumn":31},{"ruleId":"react/prop-types","severity":2,"message":"'selectedLayers.indexOf' is missing in props validation","line":150,"column":36,"nodeType":"Identifier","messageId":"missingPropType","endLine":150,"endColumn":43},{"ruleId":"react/prop-types","severity":2,"message":"'selectedLayers.indexOf' is missing in props validation","line":150,"column":79,"nodeType":"Identifier","messageId":"missingPropType","endLine":150,"endColumn":86},{"ruleId":"react/prop-types","severity":2,"message":"'selectedLayers.indexOf' is missing in props validation","line":163,"column":36,"nodeType":"Identifier","messageId":"missingPropType","endLine":163,"endColumn":43},{"ruleId":"react/prop-types","severity":2,"message":"'selectedLayers.indexOf' is missing in props validation","line":163,"column":81,"nodeType":"Identifier","messageId":"missingPropType","endLine":163,"endColumn":88}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet.locatecontrol/dist/L.Control.Locate.css\";\nimport \"leaflet.locatecontrol\";\nimport \"leaflet-draw\";\nimport \"@components/BetterWMS.js\";\nimport axiosInstance from \"@config/axios-config\";\nimport { convertDMSToDecimal, convertDMSToDecimalNo } from \"@components/convertDMSToDecimal\";\nimport { ToastCommon } from \"@components/ToastCommon.jsx\";\nimport { TOAST } from \"@common/constants.js\";\nimport SaltChartFull from \"@pages/map/SaltChartFull\";\nimport MapDetails from \"@pages/map/MapDetails\";\nimport { initializeMap } from \"@components/map/mapInitialization\";\nimport { renderSalinityPoints } from \"@components/map/SalinityMarkers\";\nimport { renderHydrometStations } from \"@components/map/HydrometMarkers\";\nimport { updateLegendVisibility } from \"@components/map/mapStyles\";\nimport { handleLocationChange, handleFeatureHighlight } from \"@components/map/mapUtils\";\n\nimport {\n    fetchSalinityStationPositions,\n    fetchHydrometeorologyStationPositions,\n} from \"@components/map/mapDataServices\";\nimport { getSalinityIcon, getHydrometIcon } from \"@components/map/mapMarkers\";\nimport { prefixUnitMap } from \"@components/map/mapStyles.js\";\n\nconst MapboxMap = ({ selectedLayers, selectedLocation, highlightedFeature, setHighlightedFeature }) => {\n    const mapContainer = useRef(null);\n    const [map, setMap] = useState(null);\n    const overlayLayers = useRef({});\n    const [selectedPoint, setSelectedPoint] = useState(null);\n    const [showFullChart, setShowFullChart] = useState(false);\n    const [salinityData, setSalinityData] = useState([]);\n    const [selectedStation, setSelectedStation] = useState(null);\n    const [hydrometData, setHydrometData] = useState([]);\n    const highlightedLayerRef = useRef(null);\n    const highlightedMarkerRef = useRef(null);\n\n    const handleCloseDetails = () => {\n        setSelectedPoint(null);\n        setSelectedStation(null);\n    };\n\n    // Add global function for popup button action\n    useEffect(() => {\n        window.openChartDetails = (kiHieu) => {\n            // Find the selected point data\n            const selectedPointData = selectedPoint?.kiHieu === kiHieu ? selectedPoint : null;\n\n            if (selectedPointData && salinityData.length > 0) {\n                setShowFullChart(true);\n            } else {\n                // If point data is not available, fetch it\n                const fetchPointData = async () => {\n                    try {\n                        // You might need to fetch the point data here if not already available\n                        // For now, just open the chart with available data\n                        setShowFullChart(true);\n                    } catch (error) {\n                        console.error(\"Error opening chart details:\", error);\n                    }\n                };\n                fetchPointData();\n            }\n        };\n\n        window.openHydrometDetails = (maTram) => {\n            // Find the selected station data\n            const selectedStationData = selectedStation?.maTram === maTram ? selectedStation : null;\n\n            if (selectedStationData && hydrometData.length > 0) {\n                setShowFullChart(true);\n            } else {\n                // If station data is not available, fetch it\n                const fetchStationData = async () => {\n                    try {\n                        // You might need to fetch the station data here if not already available\n                        // For now, just open the chart with available data\n                        setShowFullChart(true);\n                    } catch (error) {\n                        console.error(\"Error opening hydromet details:\", error);\n                    }\n                };\n                fetchStationData();\n            }\n        };\n\n        // Cleanup function\n        return () => {\n            if (window.openChartDetails) {\n                delete window.openChartDetails;\n            }\n            if (window.openHydrometDetails) {\n                delete window.openHydrometDetails;\n            }\n        };\n    }, [selectedPoint, salinityData, selectedStation, hydrometData]);\n\n    // Initialize map\n    useEffect(() => {\n        if (map || !mapContainer.current) return;\n\n        const { mapInstance } = initializeMap(mapContainer.current);\n        setMap(mapInstance);\n\n        return () => {\n            if (mapInstance) {\n                mapInstance.remove();\n            }\n        };\n    }, []);\n\n    // Handle layer changes and re-render map\n    useEffect(() => {\n        if (!map || !selectedLayers) return;\n\n        // Clear existing selections when layers change\n        setSelectedPoint(null);\n        setSelectedStation(null);\n        setShowFullChart(false);\n        setSalinityData([]);\n        setHydrometData([]);\n\n        // Clear existing overlay layers (WMS layers)\n        Object.entries(overlayLayers.current).forEach(([_, layer]) => {\n            if (map.hasLayer(layer)) {\n                map.removeLayer(layer);\n            }\n        });\n        overlayLayers.current = {};\n\n        // Clear all markers and layers from map\n        map.eachLayer((layer) => {\n            if (layer.options?.isSalinityPoint || layer.options?.isHydrometStation) {\n                map.removeLayer(layer);\n            }\n        });\n\n        // Implement mutual exclusivity between salinity points and hydromet stations\n        const hasSalinityPoints = selectedLayers.includes(\"salinityPoints\");\n        const hasHydrometStations = selectedLayers.includes(\"hydrometStations\");\n\n        // Add selected layers with mutual exclusivity logic\n        selectedLayers.forEach((layerName) => {\n            if (layerName === \"salinityPoints\") {\n                // Only render if hydromet stations are not selected\n                if (\n                    !hasHydrometStations ||\n                    selectedLayers.indexOf(\"salinityPoints\") > selectedLayers.indexOf(\"hydrometStations\")\n                ) {\n                    renderSalinityPoints(map, setSalinityData, setSelectedPoint);\n                    // Add to overlay layers for legend visibility\n                    overlayLayers.current[layerName] = {\n                        name: \"Điểm đo mặn\",\n                        type: \"marker\",\n                    };\n                }\n            } else if (layerName === \"hydrometStations\") {\n                // Only render if salinity points are not selected\n                if (\n                    !hasSalinityPoints ||\n                    selectedLayers.indexOf(\"hydrometStations\") > selectedLayers.indexOf(\"salinityPoints\")\n                ) {\n                    renderHydrometStations(map, setHydrometData, setSelectedStation);\n                    // Add to overlay layers for legend visibility\n                    overlayLayers.current[layerName] = {\n                        name: \"Trạm khí tượng thủy văn\",\n                        type: \"marker\",\n                    };\n                }\n            } else {\n                // Handle WMS layers from GeoServer\n                const wmsLayer = L.tileLayer.betterWms(\n                    \"http://localhost:8080/geoserver/xamnhapman_tphcm/wms\",\n                    {\n                        layers: `xamnhapman_tphcm:${layerName}`,\n                        transparent: true,\n                        format: \"image/png\",\n                        version: \"1.1.1\", // quan trọng\n                        info_format: \"text/html\", // để hiển thị bảng đẹp\n                        attribution: \"GeoServer\",\n                    },\n                );\n\n                wmsLayer.addTo(map);\n                overlayLayers.current[layerName] = wmsLayer;\n            }\n        });\n\n        updateLegendVisibility(overlayLayers.current);\n\n        // Force map refresh/re-render\n        setTimeout(() => {\n            map.invalidateSize();\n        }, 100);\n    }, [selectedLayers, map]);\n\n    // Handle location changes\n    useEffect(() => {\n        handleLocationChange(map, selectedLocation);\n    }, [selectedLocation, map]);\n\n    // Handle feature highlighting\n    useEffect(() => {\n        handleFeatureHighlight(map, highlightedFeature, highlightedLayerRef, highlightedMarkerRef);\n    }, [highlightedFeature, map]);\n\n    // Force re-render when key dependencies change\n    useEffect(() => {\n        if (!map) return;\n\n        // Close any open popups\n        map.closePopup();\n\n        // Clear any highlighted features\n        if (highlightedLayerRef.current) {\n            map.removeLayer(highlightedLayerRef.current);\n            highlightedLayerRef.current = null;\n        }\n\n        if (highlightedMarkerRef.current) {\n            map.removeLayer(highlightedMarkerRef.current);\n            highlightedMarkerRef.current = null;\n        }\n\n        // Force map refresh\n        map.invalidateSize();\n    }, [selectedLayers, selectedLocation, map]);\n\n    // Date search functionality for legend\n    useEffect(() => {\n        if (!map) return;\n\n        setTimeout(() => {\n            const dateInput = document.getElementById(\"legend-date\");\n            if (!dateInput) return;\n\n            dateInput.addEventListener(\"change\", async () => {\n                const rawDate = dateInput.value; // yyyy-mm-dd\n\n                if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(rawDate)) return;\n\n                const [year, month, day] = rawDate.split(\"-\");\n                if (parseInt(year, 10) < 1000) return;\n\n                try {\n                    const response = await axiosInstance.get(`/api/search-date/${rawDate}`);\n                    const data = response.data;\n\n                    if (data.meteorologyData?.length || data.hydrologyData?.length) {\n                        const hydrometeorologyPositions = await fetchHydrometeorologyStationPositions(\n                            data.meteorologyData || data.hydrologyData,\n                        );\n\n                        renderHydrometeorologySummaryPoints(map, hydrometeorologyPositions);\n                    }\n\n                    if (data.salinityData?.length) {\n                        const salinityPositions = await fetchSalinityStationPositions(data.salinityData);\n                        renderSalinitySummaryPoints(map, salinityPositions);\n                    }\n\n                    // Update legend UI with new structure\n                    const legendSummary = document.getElementById(\"legend-summary\");\n                    const legendPrimary = document.getElementById(\"legend-primary\");\n\n                    if (legendSummary && legendPrimary) {\n                        legendSummary.style.display = \"block\";\n\n                        const formattedDate = `${day}-${month}-${year}`;\n                        const labelMapping = {\n                            meteorologyData: \"Khí tượng\",\n                            salinityData: \"Độ mặn\",\n                            hydrologyData: \"Thủy văn\",\n                        };\n\n                        legendPrimary.innerHTML = `\n              <div class=\"data-summary-card\">\n                <div class=\"summary-header\">\n                  <h6 class=\"summary-date\">📅 ${formattedDate}</h6>\n                </div>\n                <div class=\"summary-stats\">\n                  ${Object.keys(data)\n                      .map((key) => {\n                          const label = labelMapping[key] || key;\n                          const count = data[key].length;\n                          return `\n                        <div class=\"stat-item\">\n                          <span class=\"stat-label\">${label}</span>\n                          <span class=\"stat-value\">${count} bản ghi</span>\n                        </div>\n                      `;\n                      })\n                      .join(\"\")}\n                </div>\n              </div>\n            `;\n                    }\n                } catch (error) {\n                    console.log(`error.message:`, error.message);\n                    ToastCommon(TOAST.ERROR, error.message);\n                }\n            });\n        }, 0);\n    }, [map]);\n\n    // Summary points rendering functions for date search\n    const renderSalinitySummaryPoints = (mapInstance, salinityPositions) => {\n        const latLngs = [];\n\n        salinityPositions.forEach((station) => {\n            const point = station.position[0];\n            const lat = convertDMSToDecimal(point.ViDo);\n            const lng = convertDMSToDecimal(point.KinhDo);\n            const value = parseFloat(station.value);\n            const date = new Date(station.date).toLocaleDateString(\"vi-VN\");\n            let color = \"#6c757d\";\n            if (value < 1) color = \"blue\";\n            else if (value < 4) color = \"#fd7e14\";\n            else color = \"#dc3545\";\n\n            if (lat == null || lng == null || isNaN(lat) || isNaN(lng)) {\n                console.warn(`⚠️ Không thể chuyển tọa độ tại điểm ${point.TenDiem}`);\n                return;\n            }\n\n            const icon = getSalinityIcon(value);\n\n            const marker = L.marker([lat, lng], {\n                icon,\n                isSalinityPoint: true,\n            }).addTo(mapInstance);\n\n            latLngs.push([lat, lng]);\n\n            marker.bindTooltip(point.TenDiem, {\n                permanent: true,\n                direction: \"top\",\n                offset: [0, -10],\n                className: `custom-tooltip tooltip-${color.replace(\"#\", \"\")}`,\n            });\n\n            marker.on(\"click\", () => {\n                const zoomLevel = 15;\n                const offsetX = 0;\n                const offsetY = -100;\n\n                const targetLatLng = L.latLng(lat, lng);\n                const pointInPixel = mapInstance.project(targetLatLng, zoomLevel);\n                const offsetPoint = pointInPixel.subtract([-offsetX, -offsetY]);\n                const offsetLatLng = mapInstance.unproject(offsetPoint, zoomLevel);\n                mapInstance.setView(offsetLatLng, zoomLevel, { animate: true });\n\n                const popupHTML = `\n          <div class=\"modern-popup\">\n            <div class=\"popup-header\">\n              <div class=\"popup-title\">\n                <h4 class=\"popup-name\">${point.TenDiem}</h4>\n                <span class=\"popup-type\">Điểm đo độ mặn</span>\n              </div>\n              <div class=\"popup-status ${\n                  value < 1 ? \"status-low\" : value < 4 ? \"status-medium\" : \"status-high\"\n              }\">\n                ${value < 1 ? \"Bình thường\" : value < 4 ? \"Rủi ro cấp 2\" : \"Rủi ro cấp 3\"}\n              </div>\n            </div>\n            \n            <div class=\"popup-content\">\n              <div class=\"popup-main-value\">\n                <span class=\"value-label\">Độ mặn</span>\n                <span class=\"value-number\" style=\"color: ${color}\">\n                  ${!isNaN(value) ? `${value.toFixed(2)} ‰` : \"N/A\"}\n                </span>\n              </div>\n              \n              <div class=\"popup-details\">\n                <div class=\"detail-grid\">\n                  <div class=\"detail-item\">\n                    <div class=\"detail-content py-2\">\n                      <strong class=\"detail-label\"><i class=\"detail-icon\">🏷️</i> Phân loại: </strong>\n                      <span class=\"detail-value\">${point.PhanLoai}</span>\n                    </div>\n                  </div>\n                  \n                  <div class=\"detail-item\">\n                    <div class=\"detail-content py-2\">\n                      <strong class=\"detail-label font-weight\"><i class=\"detail-icon\">⏰</i> Thời gian: </strong>\n                      <span class=\"detail-value\">${point.ThoiGian}</span>\n                    </div>\n                  </div>\n                  \n                  <div class=\"detail-item\">\n                    <div class=\"detail-content py-2\">\n                      <strong class=\"detail-label\"><i class=\"detail-icon\">📊</i> Tần suất đo: </strong>\n                      <span class=\"detail-value\">${point.TanSuat}</span>\n                    </div>\n                  </div>\n                  \n                  <div class=\"detail-item\">\n                    <div class=\"detail-content py-2\">\n                      <strong class=\"detail-label\"><i class=\"detail-icon\">📅</i> Ngày thống kê: </strong>\n                      <span class=\"detail-value\">${date}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        `;\n\n                marker.bindPopup(popupHTML).openPopup();\n            });\n        });\n\n        if (latLngs.length > 0) {\n            const bounds = L.latLngBounds(latLngs);\n            mapInstance.fitBounds(bounds, {\n                padding: [200, 200],\n                animate: true,\n            });\n        }\n    };\n\n    const renderHydrometeorologySummaryPoints = (mapInstance, hydrometeorologyPositions) => {\n        const latLngs = [];\n        const grouped = {};\n        hydrometeorologyPositions.forEach((item) => {\n            const key = item.position[0].KiHieu;\n            if (!grouped[key]) {\n                grouped[key] = {\n                    position: item.position,\n                    values: [],\n                    date: item.date,\n                };\n            }\n            grouped[key].values.push({\n                kiHieu: item.kiHieu,\n                value: item.value,\n            });\n        });\n        const result = Object.values(grouped);\n        console.log(result);\n\n        result.forEach((station) => {\n            const point = station.position[0];\n            const lat = convertDMSToDecimalNo(point.ViDo);\n            const lng = convertDMSToDecimalNo(point.KinhDo);\n            const date = station.date;\n\n            if (lat == null || lng == null || isNaN(lat) || isNaN(lng)) {\n                console.warn(`⚠️ Không thể chuyển tọa độ tại điểm ${point.TenTam}`);\n                return;\n            }\n\n            // Chỉ sử dụng icon chung cho trạm\n            const icon = getHydrometIcon();\n\n            const marker = L.marker([lat, lng], {\n                icon,\n                isHydrometPoint: true,\n            }).addTo(mapInstance);\n\n            latLngs.push([lat, lng]);\n\n            marker.bindTooltip(point.TenTam, {\n                permanent: true,\n                direction: \"top\",\n                offset: [0, -10],\n                className: \"custom-tooltip\",\n            });\n\n            const valueRows = station.values\n                .map((val) => {\n                    const prefix = val.kiHieu.split(\"_\")[0];\n                    const unitData = prefixUnitMap()[prefix];\n\n                    let DonVi = \"\";\n                    let contentLabel = \"\";\n                    if (typeof unitData === \"object\" && unitData !== null) {\n                        DonVi = unitData.donvi || \"\";\n                        contentLabel = unitData.content || \"\";\n                    } else {\n                        DonVi = unitData || \"\";\n                        contentLabel = unitData || \"\";\n                    }\n\n                    const value = parseFloat(val.value);\n\n                    // Color based on unit type (DonVi) instead of numerical value\n                    let color = \"#6c757d\"; // Default gray\n                    switch (DonVi) {\n                        case \"(mm)\": // Rainfall\n                            color = \"#0d6efd\"; // Blue for rainfall\n                            break;\n                        case \"(°C)\": // Temperature\n                            color = \"#dc3545\"; // Red for temperature\n                            break;\n                        case \"(cm)\": // Water level\n                            color = \"#198754\"; // Green for water level\n                            break;\n                        default:\n                            color = \"#6c757d\"; // Gray for unknown types\n                    }\n\n                    return `\n          <div class=\"popup-main-value\">\n            <span class=\"value-label\">${contentLabel || \"Giá trị đo\"}</span>\n            <span class=\"value-number\" style=\"color: ${color}\">\n              ${!isNaN(value) ? value.toFixed(2) : \"-\"} ${DonVi}\n            </span>\n          </div>\n        `;\n                })\n                .join(\"\");\n\n            const popupHTML = `\n        <div class=\"modern-popup\">\n          <div class=\"popup-header\">\n            <div class=\"popup-icon\">🌤️</div>\n            <div class=\"popup-title\">\n              <h4 class=\"popup-name\">${point.TenTam}</h4>\n              <span class=\"popup-type\">${point.PhanLoai || \"Trạm khí tượng thủy văn\"}</span>\n            </div>\n          </div>\n    \n          <div class=\"popup-content\">\n            ${valueRows}\n            <div class=\"popup-details\">\n              <div class=\"detail-grid\">\n                <div class=\"detail-item py-2\">\n                  <div class=\"detail-content\">\n                    <strong class=\"detail-label\"><i class=\"detail-icon\">🏭</i> Mã trạm:</strong>\n                    <span class=\"detail-value\">${point.KiHieu}</span>\n                  </div>\n                </div>\n    \n                <div class=\"detail-item py-2\">\n                  <div class=\"detail-content\">\n                    <strong class=\"detail-label\"><i class=\"detail-icon\">📅</i> Ngày đo:</strong>\n                    <span class=\"detail-value\">${date}</span>\n                  </div>\n                </div>\n    \n                <div class=\"detail-item py-2\">\n                  <div class=\"detail-content\">\n                    <strong class=\"detail-label\"> <i class=\"detail-icon\">📊</i> Yếu tố:</strong>\n                    <span class=\"detail-value\">${point.YeuTo || \"Không xác định\"}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n\n            marker.bindPopup(popupHTML);\n        });\n\n        if (latLngs.length > 0) {\n            const bounds = L.latLngBounds(latLngs);\n            mapInstance.fitBounds(bounds, {\n                padding: [50, 50],\n                animate: true,\n            });\n        }\n    };\n\n    return (\n        <>\n            <div ref={mapContainer} id=\"mapContainer\"></div>\n\n            <MapDetails\n                salinityData={salinityData}\n                selectedPoint={selectedPoint}\n                hydrometData={hydrometData}\n                onOpenFullChart={() => setShowFullChart(true)}\n                onClose={handleCloseDetails}\n            />\n\n            <SaltChartFull\n                show={showFullChart}\n                kiHieu={selectedPoint?.kiHieu}\n                tenDiem={selectedPoint?.tenDiem}\n                salinityData={salinityData}\n                hydrometData={hydrometData}\n                onClose={() => setShowFullChart(false)}\n            />\n        </>\n    );\n};\n\nexport default MapboxMap;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\map\\SalinityBarChart.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'active' is missing in props validation","line":14,"column":26,"nodeType":"Property","messageId":"missingPropType","endLine":14,"endColumn":32},{"ruleId":"react/prop-types","severity":2,"message":"'payload' is missing in props validation","line":14,"column":34,"nodeType":"Property","messageId":"missingPropType","endLine":14,"endColumn":41},{"ruleId":"react/prop-types","severity":2,"message":"'payload.length' is missing in props validation","line":15,"column":28,"nodeType":"Identifier","messageId":"missingPropType","endLine":15,"endColumn":34},{"ruleId":"react/prop-types","severity":2,"message":"'payload[].payload' is missing in props validation","line":16,"column":41,"nodeType":"Identifier","messageId":"missingPropType","endLine":16,"endColumn":48},{"ruleId":"react/prop-types","severity":2,"message":"'payload[].payload.date' is missing in props validation","line":17,"column":53,"nodeType":"Identifier","messageId":"missingPropType","endLine":17,"endColumn":57},{"ruleId":"react/prop-types","severity":2,"message":"'payload[].payload.trend' is missing in props validation","line":18,"column":36,"nodeType":"Identifier","messageId":"missingPropType","endLine":18,"endColumn":41},{"ruleId":"react/prop-types","severity":2,"message":"'payload[].payload.salinity' is missing in props validation","line":23,"column":66,"nodeType":"Identifier","messageId":"missingPropType","endLine":23,"endColumn":74},{"ruleId":"react/prop-types","severity":2,"message":"'payload[].payload.trend.direction' is missing in props validation","line":29,"column":39,"nodeType":"Identifier","messageId":"missingPropType","endLine":29,"endColumn":48},{"ruleId":"react/prop-types","severity":2,"message":"'payload[].payload.trend.direction' is missing in props validation","line":31,"column":45,"nodeType":"Identifier","messageId":"missingPropType","endLine":31,"endColumn":54},{"ruleId":"react/prop-types","severity":2,"message":"'payload[].payload.trend.direction' is missing in props validation","line":36,"column":32,"nodeType":"Identifier","messageId":"missingPropType","endLine":36,"endColumn":41},{"ruleId":"react/prop-types","severity":2,"message":"'payload[].payload.trend.direction' is missing in props validation","line":36,"column":71,"nodeType":"Identifier","messageId":"missingPropType","endLine":36,"endColumn":80},{"ruleId":"react/prop-types","severity":2,"message":"'payload[].payload.trend.direction' is missing in props validation","line":37,"column":32,"nodeType":"Identifier","messageId":"missingPropType","endLine":37,"endColumn":41},{"ruleId":"react/prop-types","severity":2,"message":"'payload[].payload.trend.direction' is missing in props validation","line":39,"column":37,"nodeType":"Identifier","messageId":"missingPropType","endLine":39,"endColumn":46},{"ruleId":"react/prop-types","severity":2,"message":"'payload[].payload.trend.difference' is missing in props validation","line":42,"column":41,"nodeType":"Identifier","messageId":"missingPropType","endLine":42,"endColumn":51},{"ruleId":"react/prop-types","severity":2,"message":"'payload[].payload.trend.percentage' is missing in props validation","line":42,"column":64,"nodeType":"Identifier","messageId":"missingPropType","endLine":42,"endColumn":74},{"ruleId":"react/prop-types","severity":2,"message":"'data' is missing in props validation","line":51,"column":29,"nodeType":"Property","messageId":"missingPropType","endLine":51,"endColumn":33},{"ruleId":"react/prop-types","severity":2,"message":"'height' is missing in props validation","line":51,"column":35,"nodeType":"Property","messageId":"missingPropType","endLine":51,"endColumn":41},{"ruleId":"react/prop-types","severity":2,"message":"'data.map' is missing in props validation","line":53,"column":32,"nodeType":"Identifier","messageId":"missingPropType","endLine":53,"endColumn":35}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from \"recharts\";\n\nconst calculateTrend = (current, previous) => {\n    if (!previous) return null;\n    const diff = current - previous;\n    return {\n        difference: diff.toFixed(2),\n        direction: diff > 0 ? \"increase\" : diff < 0 ? \"decrease\" : \"stable\",\n        percentage: ((Math.abs(diff) / previous) * 100).toFixed(1),\n    };\n};\n\nconst CustomTooltip = ({ active, payload }) => {\n    if (active && payload?.length) {\n        const currentValue = payload[0].payload;\n        const formattedDate = new Date(currentValue.date).toLocaleDateString(\"vi-VN\");\n        const trend = currentValue.trend;\n\n        return (\n            <div className=\"bg-white border p-2 rounded shadow-sm\">\n                <p className=\"mb-1\">Ngày: {formattedDate}</p>\n                <p className=\"mb-1\">Độ mặn: {Number(currentValue.salinity).toFixed(2)} ‰</p>\n                {trend && (\n                    <p\n                        className=\"mb-0\"\n                        style={{\n                            color:\n                                trend.direction === \"increase\"\n                                    ? \"#dc3545\"\n                                    : trend.direction === \"decrease\"\n                                      ? \"#198754\"\n                                      : \"#6c757d\",\n                        }}\n                    >\n                        {trend.direction === \"increase\" ? \"▲\" : trend.direction === \"decrease\" ? \"▼\" : \"■\"}\n                        {trend.direction === \"increase\"\n                            ? \"Tăng\"\n                            : trend.direction === \"decrease\"\n                              ? \"Giảm\"\n                              : \"Không đổi\"}{\" \"}\n                        {Math.abs(trend.difference)} ‰ ({trend.percentage}%)\n                    </p>\n                )}\n            </div>\n        );\n    }\n    return null;\n};\n\nconst SalinityBarChart = ({ data, height }) => {\n    // Ensure salinity values are numbers and calculate trends\n    const formattedData = data.map((item, index) => {\n        const salinity = Number(item.salinity);\n        const previousItem = index > 0 ? data[index - 1] : null;\n        const previousSalinity = previousItem ? Number(previousItem.salinity) : null;\n\n        return {\n            ...item,\n            salinity,\n            trend: calculateTrend(salinity, previousSalinity),\n        };\n    });\n\n    const isLoading = !formattedData || formattedData.length === 0;\n\n    const uniqueYears = [...new Set(formattedData.map((d) => new Date(d.date).getFullYear()))];\n\n    const ticksByYear = uniqueYears.map(\n        (year) => formattedData.find((d) => new Date(d.date).getFullYear() === year)?.date,\n    );\n\n    return (\n        <>\n            {isLoading ? (\n                <div className=\"text-center py-5\">\n                    <div className=\"spinner-border text-primary\" role=\"status\">\n                        <span className=\"visually-hidden\">Loading...</span>\n                    </div>\n                    <p className=\"mt-2\">Đang tải dữ liệu...</p>\n                </div>\n            ) : (\n                <ResponsiveContainer width=\"100%\" height=\"100%\" minHeight={height}>\n                    <BarChart data={formattedData} barCategoryGap={8}>\n                        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#dee2e6\" />\n\n                        <XAxis\n                            dataKey=\"date\"\n                            tickFormatter={(d) => new Date(d).getFullYear()}\n                            ticks={ticksByYear}\n                            tick={{ fontSize: 10 }}\n                        />\n\n                        <YAxis\n                            unit=\"‰\"\n                            tick={{\n                                fontSize: 12,\n                            }}\n                            domain={[0, (dataMax) => Math.ceil(dataMax)]}\n                            allowDataOverflow={true}\n                        />\n                        <Tooltip content={<CustomTooltip />} />\n                        <Bar dataKey=\"salinity\" barSize={10}>\n                            {formattedData.map((entry, index) => {\n                                let fillColor = \"#0d6efd\";\n                                if (entry.salinity >= 4) fillColor = \"#dc3545\";\n                                else if (entry.salinity >= 1) fillColor = \"#fd7e14\";\n                                return <Cell key={`cell-${index}`} fill={fillColor} />;\n                            })}\n                        </Bar>\n                    </BarChart>\n                </ResponsiveContainer>\n            )}\n            <div className=\"d-flex justify-content-center gap-3 mt-2 small\">\n                <div className=\"d-flex align-items-center gap-1\">\n                    <div\n                        style={{\n                            width: 12,\n                            height: 12,\n                            backgroundColor: \"#0d6efd\",\n                            borderRadius: 2,\n                        }}\n                    ></div>\n                    <span>Bình thường (độ mặn &lt; 1‰)</span>\n                </div>\n                <div className=\"d-flex align-items-center gap-1\">\n                    <div\n                        style={{\n                            width: 12,\n                            height: 12,\n                            backgroundColor: \"#fd7e14\",\n                            borderRadius: 2,\n                        }}\n                    ></div>\n                    <span>Rủi ro cấp 2 (độ mặn 1‰ - 4‰)</span>\n                </div>\n                <div className=\"d-flex align-items-center gap-1\">\n                    <div\n                        style={{\n                            width: 12,\n                            height: 12,\n                            backgroundColor: \"#dc3545\",\n                            borderRadius: 2,\n                        }}\n                    ></div>\n                    <span>Rủi ro cấp 3 (độ mặn &gt; 4‰)</span>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default SalinityBarChart;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\map\\SaltChartFull.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'data' is missing in props validation","line":5,"column":31,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":35},{"ruleId":"react/prop-types","severity":2,"message":"'data.map' is missing in props validation","line":16,"column":23,"nodeType":"Identifier","messageId":"missingPropType","endLine":16,"endColumn":26},{"ruleId":"react/prop-types","severity":2,"message":"'show' is missing in props validation","line":28,"column":26,"nodeType":"Property","messageId":"missingPropType","endLine":28,"endColumn":30},{"ruleId":"react/prop-types","severity":2,"message":"'kiHieu' is missing in props validation","line":28,"column":32,"nodeType":"Property","messageId":"missingPropType","endLine":28,"endColumn":38},{"ruleId":"react/prop-types","severity":2,"message":"'tenDiem' is missing in props validation","line":28,"column":40,"nodeType":"Property","messageId":"missingPropType","endLine":28,"endColumn":47},{"ruleId":"react/prop-types","severity":2,"message":"'salinityData' is missing in props validation","line":28,"column":49,"nodeType":"Property","messageId":"missingPropType","endLine":28,"endColumn":61},{"ruleId":"react/prop-types","severity":2,"message":"'onClose' is missing in props validation","line":28,"column":63,"nodeType":"Property","messageId":"missingPropType","endLine":28,"endColumn":70}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\nimport axiosInstance from \"@config/axios-config\";\nimport SalinityBarChart from \"@pages/map/SalinityBarChart\";\n\nconst ExportPreviewTable = ({ data }) => (\n    <div className=\"table-responsive mb-3\" style={{ maxHeight: 300 }}>\n        <table className=\"table table-bordered table-sm table-striped\">\n            <thead className=\"table-light\">\n                <tr>\n                    <th>#</th>\n                    <th>Ngày</th>\n                    <th>Độ mặn (‰)</th>\n                </tr>\n            </thead>\n            <tbody>\n                {data.map((item, idx) => (\n                    <tr key={idx}>\n                        <td>{idx + 1}</td>\n                        <td>{new Date(item.date).toLocaleDateString(\"vi-VN\")}</td>\n                        <td>{Number(item.salinity).toFixed(4)}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    </div>\n);\n\nconst SaltChartFull = ({ show, kiHieu, tenDiem, salinityData, onClose }) => {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        if (show && salinityData) {\n            setData(salinityData);\n        } else {\n            setData([]);\n        }\n    }, [show, salinityData]);\n\n    useEffect(() => {\n        if (!show) setData([]);\n    }, [show]);\n\n    const handleExportExcel = async () => {\n        try {\n            const res = await axiosInstance.get(`/api/salinity-export/${kiHieu}`, {\n                responseType: \"blob\",\n            });\n\n            const blob = new Blob([res.data], {\n                type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n            });\n\n            const url = window.URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = url;\n            link.setAttribute(\"download\", `DoMan_${tenDiem || kiHieu}.xlsx`);\n            document.body.appendChild(link);\n            link.click();\n            link.remove();\n        } catch (error) {\n            console.error(\"❌ Xuất Excel lỗi:\", error);\n            alert(\"Không thể xuất dữ liệu từ máy chủ.\");\n        }\n    };\n\n    const validData = data?.filter(\n        (item) => item.salinity !== null && item.salinity !== \"NULL\" && !isNaN(item.salinity),\n    );\n\n    const startDate = validData?.length > 0 ? new Date(validData[0].date).toLocaleDateString(\"vi-VN\") : null;\n    const endDate =\n        validData?.length > 0\n            ? new Date(validData[validData.length - 1].date).toLocaleDateString(\"vi-VN\")\n            : null;\n\n    return (\n        <div\n            className={`modal fade ${show ? \"show d-block\" : \"\"}`}\n            tabIndex=\"-1\"\n            style={{ backgroundColor: show ? \"rgba(0,0,0,0.5)\" : \"transparent\" }}\n        >\n            <div className=\"modal-dialog modal-lg modal-dialog-centered\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header border-0 pb-0\">\n                        <div className=\"w-100 text-center\">\n                            <h5 className=\"modal-title mb-1 fw-bold\">Biểu đồ xâm nhập mặn - {tenDiem}</h5>\n                            {startDate && endDate && (\n                                <div className=\"text-muted small\">\n                                    Từ <strong>{startDate}</strong> đến <strong>{endDate}</strong>\n                                </div>\n                            )}\n                        </div>\n                        <button\n                            type=\"button\"\n                            className=\"btn-close position-absolute end-0 top-0 m-3\"\n                            onClick={onClose}\n                        ></button>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <ul className=\"nav nav-tabs mb-3\" role=\"tablist\">\n                            <li className=\"nav-item\">\n                                <button\n                                    className=\"nav-link active\"\n                                    id=\"chart-tab\"\n                                    data-bs-toggle=\"tab\"\n                                    data-bs-target=\"#chart\"\n                                    type=\"button\"\n                                >\n                                    Biểu đồ\n                                </button>\n                            </li>\n                            <li className=\"nav-item\">\n                                <button\n                                    className=\"nav-link\"\n                                    id=\"export-tab\"\n                                    data-bs-toggle=\"tab\"\n                                    data-bs-target=\"#export\"\n                                    type=\"button\"\n                                >\n                                    Xuất dữ liệu\n                                </button>\n                            </li>\n                        </ul>\n\n                        <div className=\"tab-content\">\n                            <div className=\"tab-pane fade show active\" id=\"chart\">\n                                {data.length > 0 ? (\n                                    <SalinityBarChart data={data} height={350} />\n                                ) : (\n                                    <p className=\"text-muted\">Không có dữ liệu.</p>\n                                )}\n                            </div>\n\n                            <div className=\"tab-pane fade\" id=\"export\">\n                                {data.length > 0 ? (\n                                    <>\n                                        <ExportPreviewTable data={data} />\n                                        <div className=\"d-flex gap-2\">\n                                            <button className=\"btn btn-success\" onClick={handleExportExcel}>\n                                                📥 Tải Excel\n                                            </button>\n                                        </div>\n                                    </>\n                                ) : (\n                                    <p className=\"text-muted\">Không có dữ liệu để hiển thị.</p>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"modal-footer\">\n                        <button className=\"btn btn-secondary\" onClick={onClose}>\n                            Đóng\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SaltChartFull;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\map\\dataLayers.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\setting\\SettingUser.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FaUser, FaEnvelope, FaCalendar, FaPhone, FaLock, FaKey, FaSave, FaTimes } from \"react-icons/fa\";\nimport { REQUIRE_PASSWORD } from \"@common/messageError\";\nimport { UPDATE } from \"@common/messageConfirm\";\nimport { updateUserByUser } from \"@stores/actions/userActions\";\nimport ModalConfirm from \"@components/ModalConfirm\";\nimport { Helmet } from \"react-helmet-async\";\nimport Header from \"@pages/themes/headers/Header\";\n\nfunction SettingUser() {\n    const dispatch = useDispatch();\n    const { userInfo } = useSelector((state) => state.authStore);\n\n    const formatDateForDB = (dateString) => {\n        if (!dateString) return null; // Tránh gửi undefined\n        const parts = dateString.split(\"/\");\n        if (parts.length === 3) {\n            return `${parts[2]}-${parts[1]}-${parts[0]}`; // Chuyển từ DD/MM/YYYY → YYYY-MM-DD\n        }\n        return dateString; // Nếu đã đúng format thì giữ nguyên\n    };\n\n    const [formState, setFormState] = useState({\n        name: userInfo?.name || \"\",\n        email: userInfo?.email || \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        birthday: userInfo?.birthday || \"\",\n        phone: userInfo?.phone || \"\",\n    });\n\n    const [toggleUpdatePassword, setToggleUpdatePassword] = useState(false);\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\n    const [errorMessages, setErrorMessages] = useState({});\n    const [updatedFormState, setUpdatedFormState] = useState({});\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormState((prev) => ({\n            ...prev,\n            [name]: value,\n        }));\n    };\n\n    const handleSubmit = () => {\n        const errors = {};\n\n        if (toggleUpdatePassword) {\n            if (!formState.password) {\n                errors.password = REQUIRE_PASSWORD;\n            } else if (formState.password !== formState.confirmPassword) {\n                errors.confirmPassword = \"Mật khẩu không khớp\";\n            }\n        }\n\n        // Kiểm tra số điện thoại hợp lệ\n        if (formState.phone && !/^\\d{10,11}$/.test(formState.phone)) {\n            errors.phone = \"Số điện thoại không hợp lệ\";\n        }\n\n        if (Object.keys(errors).length > 0) {\n            setErrorMessages(errors);\n            return;\n        }\n\n        const updatedData = {\n            ...formState,\n            birthday: formatDateForDB(formState.birthday), // Chuyển đổi ngày sinh\n        };\n\n        setUpdatedFormState(updatedData);\n        setShowConfirmModal(true);\n    };\n\n    const confirmAction = () => {\n        dispatch(updateUserByUser(updatedFormState));\n        setShowConfirmModal(false);\n    };\n\n    return (\n        <>\n            <Helmet>\n                <title>Cài đặt | Xâm nhập mặn Tp. Hồ Chí Minh</title>\n            </Helmet>\n            <Header />\n            <div className=\"infoUser\">\n                <div className=\"settings-container\">\n                    <div className=\"settings-header\">\n                        <h1>Cài đặt tài khoản</h1>\n                        <p>Cập nhật thông tin cá nhân của bạn</p>\n                    </div>\n\n                    <div className=\"profile-section\">\n                        <form\n                            className=\"settings-form\"\n                            onSubmit={(e) => {\n                                e.preventDefault();\n                                handleSubmit();\n                            }}\n                        >\n                            <div className=\"form-sections\">\n                                <div className=\"inputGroup\">\n                                    <label htmlFor=\"name\">Họ và tên</label>\n                                    <input\n                                        type=\"text\"\n                                        id=\"name\"\n                                        name=\"name\"\n                                        value={formState.name}\n                                        onChange={handleChange}\n                                        placeholder=\"Nhập họ và tên của bạn\"\n                                    />\n                                    <FaUser className=\"input-icon\" />\n                                </div>\n\n                                <div className=\"inputGroup\">\n                                    <label htmlFor=\"email\">Email</label>\n                                    <input\n                                        type=\"email\"\n                                        id=\"email\"\n                                        name=\"email\"\n                                        value={formState.email}\n                                        onChange={handleChange}\n                                        disabled\n                                        placeholder=\"Nhập email của bạn\"\n                                    />\n                                    <FaEnvelope className=\"input-icon\" />\n                                </div>\n\n                                <div className=\"inputGroup\">\n                                    <label htmlFor=\"birthday\">Ngày sinh</label>\n                                    <input\n                                        type=\"date\"\n                                        id=\"birthday\"\n                                        name=\"birthday\"\n                                        value={formState.birthday}\n                                        onChange={handleChange}\n                                    />\n                                    <FaCalendar className=\"input-icon\" />\n                                </div>\n\n                                <div className=\"inputGroup\">\n                                    <label htmlFor=\"phone\">Số điện thoại</label>\n                                    <input\n                                        type=\"tel\"\n                                        id=\"phone\"\n                                        name=\"phone\"\n                                        value={formState.phone}\n                                        onChange={handleChange}\n                                        placeholder=\"Nhập số điện thoại của bạn\"\n                                    />\n                                    <FaPhone className=\"input-icon\" />\n                                    {errorMessages.phone && (\n                                        <span className=\"error\">{errorMessages.phone}</span>\n                                    )}\n                                </div>\n                            </div>\n\n                            <div className=\"password-toggle\">\n                                <input\n                                    type=\"checkbox\"\n                                    id=\"togglePassword\"\n                                    checked={toggleUpdatePassword}\n                                    onChange={(e) => setToggleUpdatePassword(e.target.checked)}\n                                />\n                                <label htmlFor=\"togglePassword\">Đổi mật khẩu</label>\n                            </div>\n\n                            {toggleUpdatePassword && (\n                                <div className=\"form-sections\">\n                                    <div className=\"inputGroup\">\n                                        <label htmlFor=\"password\">Mật khẩu mới</label>\n                                        <input\n                                            type=\"password\"\n                                            id=\"password\"\n                                            name=\"password\"\n                                            value={formState.password}\n                                            onChange={handleChange}\n                                            placeholder=\"Nhập mật khẩu mới\"\n                                        />\n                                        <FaKey className=\"input-icon\" />\n                                        {errorMessages.password && (\n                                            <span className=\"error\">{errorMessages.password}</span>\n                                        )}\n                                    </div>\n\n                                    <div className=\"inputGroup\">\n                                        <label htmlFor=\"confirmPassword\">Xác nhận mật khẩu</label>\n                                        <input\n                                            type=\"password\"\n                                            id=\"confirmPassword\"\n                                            name=\"confirmPassword\"\n                                            value={formState.confirmPassword}\n                                            onChange={handleChange}\n                                            placeholder=\"Xác nhận mật khẩu mới\"\n                                        />\n                                        <FaLock className=\"input-icon\" />\n                                        {errorMessages.confirmPassword && (\n                                            <span className=\"error\">{errorMessages.confirmPassword}</span>\n                                        )}\n                                    </div>\n                                </div>\n                            )}\n\n                            <div className=\"form-actions\">\n                                <button\n                                    type=\"button\"\n                                    className=\"cancel-button\"\n                                    onClick={() =>\n                                        setFormState({\n                                            ...userInfo,\n                                            password: \"\",\n                                            confirmPassword: \"\",\n                                        })\n                                    }\n                                >\n                                    <FaTimes />\n                                    Hủy\n                                </button>\n                                <button type=\"submit\" className=\"save-button\">\n                                    <FaSave />\n                                    Lưu thay đổi\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n\n                {showConfirmModal && (\n                    <ModalConfirm\n                        message={UPDATE.user}\n                        onConfirm={confirmAction}\n                        onCancel={() => setShowConfirmModal(false)}\n                    />\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default SettingUser;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\themes\\footer\\Footer.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,18],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'props' is defined but never used.","line":5,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"props"},"fix":{"range":[130,135],"text":""},"desc":"Remove unused variable 'props'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport imageLogo from \"@assets/logo.png\";\nimport { ROUTES } from \"@common/constants\";\n\nfunction Footer(props) {\n    return (\n        <div>\n            <footer className=\"footer\">\n                <div className=\"container\">\n                    <div className=\"footer-content\">\n                        {/* Logo & Giới thiệu */}\n                        <div className=\"footer-section about\">\n                            <img src={imageLogo} alt=\"Xâm nhập mặn Tp. Hồ Chí Minh\" className=\"footer-logo\" />\n                            <p>\n                                Với mục tiêu hỗ trợ giám sát môi trường nước, hệ thống WebGIS của chúng tôi\n                                cung cấp giải pháp theo dõi và cảnh báo xâm nhập mặn trên hệ thống sông, kênh,\n                                rạch tại TP. Hồ Chí Minh, giúp quản lý hiệu quả và kịp thời.\n                            </p>\n                            <div className=\"social-icons\">\n                                <a href=\"https://www.facebook.com/YenLinh.lhlb/\">\n                                    <i className=\"fa-brands fa-facebook-f\"></i>\n                                </a>\n                                <a href=\"https://www.youtube.com\">\n                                    <i className=\"fa-brands fa-youtube\"></i>\n                                </a>\n                                <a href=\"https://twitter.com\">\n                                    <i className=\"fa-brands fa-twitter\"></i>\n                                </a>\n                                <a href=\"https://www.instagram.com\">\n                                    <i className=\"fa-brands fa-instagram\"></i>\n                                </a>\n                                <a href=\"https://www.google.com\">\n                                    <i className=\"fa-brands fa-google\"></i>\n                                </a>\n                            </div>\n                        </div>\n\n                        {/* Về chúng tôi */}\n                        <div className=\"footer-section \">\n                            <h4>Về chúng tôi</h4>\n                            <ul>\n                                <li>\n                                    <a href={ROUTES.home}>Trang chủ</a>\n                                </li>\n                                <li>\n                                    <a href={ROUTES.news}>Tin tức</a>\n                                </li>\n                                <li>\n                                    <a href={ROUTES.map}>Bản đồ</a>\n                                </li>\n                                <li>\n                                    <a href={ROUTES.feedback}>Liên hệ</a>\n                                </li>\n                            </ul>\n                        </div>\n\n                        {/* Dự án tiêu biểu */}\n                        <div className=\"footer-section\">\n                            <h4>CHỨC NĂNG TRANG BẢN ĐỒ</h4>\n                            <ul>\n                                <li>Xem bản đồ địa hình</li>\n                                <li>Hiển thị dữ liệu quan trắc</li>\n                                <li>Chọn vùng quan tâm</li>\n                                <li>Định vị GPS thiết bị</li>\n                                <li>Truy vấn dữ liệu đo mặn</li>\n                                <li>Nhận cảnh báo xâm nhập mặn</li>\n                            </ul>\n                        </div>\n\n                        {/* Tư vấn khách hàng */}\n                        <div className=\"footer-section\">\n                            <h4>THÔNG TIN LIÊN HỆ</h4>\n                            <p>\n                                <a\n                                    className=\"footer-contact\"\n                                    href=\"https://maps.app.goo.gl/swSbkG8NGr2TL1pT9\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    <i className=\"fa-solid fa-location-dot\"></i>\n                                    <span>Đại học Nông Lâm</span>\n                                </a>\n                            </p>\n                            <p>\n                                <a className=\"footer-contact\" href=\"mailto:21166139@st.hcmuaf.edu.vn\">\n                                    <i className=\"fa-solid fa-envelope\"></i>\n                                    <span>21166139@st.hcmuaf.edu.vn</span>\n                                </a>\n                            </p>\n                            <p>\n                                <a className=\"footer-contact\" href=\"tel:+84395245029\">\n                                    <i className=\"fa-solid fa-phone\"></i>\n                                    <span>+84 395 245 029</span>\n                                </a>\n                            </p>\n                            <p>\n                                <a\n                                    className=\"footer-contact\"\n                                    href=\"https://www.facebook.com/YenLinh.lhlb/\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    <i className=\"fa-brands fa-facebook-f\"></i>\n                                    <span>Facebook</span>\n                                </a>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </footer>\n            <div className=\"bottom-home\">\n                <div className=\"container\">\n                    Copyright © 2025 - Xâm nhập mặn Tp. Hồ Chí Minh - Nguyễn Võ Yến Linh\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Footer;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\themes\\headers\\Header.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport imageLogo from \"@assets/logo.png\";\nimport { NavLink } from \"react-router-dom\";\nimport { ROUTES } from \"@common/constants\";\n\nfunction Header() {\n    const [query, setQuery] = useState(\"\");\n\n    const onSearch = (searchQuery) => {\n        if (searchQuery.trim()) {\n            console.log(\"Tìm kiếm:\", searchQuery);\n            // Thực hiện hành động tìm kiếm\n        }\n    };\n\n    return (\n        <>\n            <div className=\"top-home\">\n                <div className=\"container d-flex justify-content-between align-items-center\">\n                    {/* Thông tin liên hệ */}\n                    <div className=\"contact-info\">\n                        <a href=\"tel:+84395245029\">\n                            <i className=\"fa-solid fa-phone\"></i>\n                            <span>+84 395 245 029</span>\n                        </a>\n                        <span> | </span>\n                        <a href=\"mailto:21166139@st.hcmuaf.edu.vn\">\n                            <i className=\"fa-solid fa-envelope\"></i>\n                            <span>21166139@st.hcmuaf.edu.vn</span>\n                        </a>\n                    </div>\n                    {/* Mạng xã hội */}\n                    <ul className=\"icon-group list-unstyled m-0\">\n                        <li>\n                            <a href=\"https://www.facebook.com/YenLinh.lhlb/\">\n                                <i className=\"fa-brands fa-facebook-f\"></i>\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"https://www.youtube.com\">\n                                <i className=\"fa-brands fa-youtube\"></i>\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"https://twitter.com\">\n                                <i className=\"fa-brands fa-twitter\"></i>\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"https://www.instagram.com\">\n                                <i className=\"fa-brands fa-instagram\"></i>\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"https://www.google.com\">\n                                <i className=\"fa-brands fa-google\"></i>\n                            </a>\n                        </li>\n                        <li className=\"login-menu\">\n                            <NavLink\n                                to={localStorage.getItem(\"access_token\") ? ROUTES.setting : ROUTES.login}\n                                className=\"login-link\"\n                            >\n                                <i className=\"fa-solid fa-user\"></i>\n                                <span>Tài khoản</span>\n                            </NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <header className=\"headerMenu\">\n                <div className=\"container d-flex align-items-center justify-content-between\">\n                    {/* Logo */}\n                    <div className=\"logo\">\n                        <NavLink to=\"/\">\n                            <img src={imageLogo} alt=\"Xâm nhập mặn TP. Hồ Chí Minh\" />\n                        </NavLink>\n                    </div>\n\n                    {/* Menu */}\n                    <nav className=\"nav-menu\">\n                        <ul className=\"d-flex list-unstyled m-0\">\n                            <li>\n                                <NavLink to=\"/\" activeClassName=\"active\">\n                                    TRANG CHỦ\n                                </NavLink>\n                            </li>\n                            <li>\n                                <NavLink to={ROUTES.about}>GIỚI THIỆU</NavLink>\n                            </li>\n                            <li>\n                                <NavLink to={ROUTES.map}>BẢN ĐỒ</NavLink>\n                            </li>\n                            <li>\n                                <NavLink to={ROUTES.feedback}>GÓP Ý</NavLink>\n                            </li>\n                            <li>\n                                <NavLink to={ROUTES.users}>NGƯỜI DÙNG</NavLink>\n                            </li>\n                        </ul>\n                    </nav>\n\n                    {/* Tìm kiếm + Button Ứng Dụng Mobile */}\n                    <div className=\"header-right d-flex align-items-center\">\n                        <div className=\"searchHome\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"Tìm kiếm...\"\n                                value={query}\n                                onChange={(e) => setQuery(e.target.value)}\n                            />\n                            <button onClick={() => onSearch(query)}>\n                                <i className=\"fa-solid fa-magnifying-glass\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </header>\n        </>\n    );\n}\n\nexport default Header;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\users\\CreateUserModal.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\users\\EditUserModal.jsx","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'userEdit' is missing in props validation","line":14,"column":26,"nodeType":"Property","messageId":"missingPropType","endLine":14,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'bootstrap' is not defined.","line":29,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { REQUIRE_NAME } from \"@common/messageError\";\nimport ModalConfirm from \"@components/ModalConfirm\";\nimport { UPDATE } from \"@common/messageConfirm\";\nimport { updateUser } from \"@stores/actions/userActions\";\n\nconst initErrorMessages = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n};\n\nfunction EditUserModal({ userEdit }) {\n    const dispatch = useDispatch();\n    const [userDetail, setUserDetail] = useState(userEdit);\n    const [errorMessages, setErrorMessages] = useState(initErrorMessages);\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n    const handleOnSubmit = () => {\n        if (userDetail.name.length === 0) {\n            setErrorMessages({ name: REQUIRE_NAME });\n            return;\n        }\n        setShowConfirmModal(true);\n\n        // Close the modal if there are no errors:\n        const modalElement = document.getElementById(\"modalEditUser\");\n        const modalInstance = bootstrap.Modal.getInstance(modalElement);\n        if (modalInstance) {\n            modalInstance.hide();\n        }\n    };\n\n    const confirmUpdate = () => {\n        dispatch(updateUser(userDetail));\n        setShowConfirmModal(false);\n    };\n\n    const handleSetName = (value) => {\n        setUserDetail({\n            ...userDetail,\n            name: value,\n        });\n    };\n\n    useEffect(() => {\n        setUserDetail(userEdit);\n        setErrorMessages(initErrorMessages);\n    }, [userEdit]);\n\n    return (\n        <>\n            <div className=\"modal fade\" id=\"modalEditUser\">\n                <div className=\"modal-dialog\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h4 className=\"modal-title\">Edit User</h4>\n                            <button\n                                id=\"close-edit-user-btn\"\n                                type=\"button\"\n                                className=\"btn-close\"\n                                data-bs-dismiss=\"modal\"\n                            ></button>\n                        </div>\n\n                        <div className=\"modal-body\">\n                            <form>\n                                <div className=\"mb-3\">\n                                    <label className=\"form-label\">Email</label>\n                                    <input\n                                        disabled\n                                        type=\"text\"\n                                        placeholder=\"Enter email\"\n                                        className=\"form-control\"\n                                        value={userDetail.email}\n                                    />\n                                </div>\n                                <div className=\"mb-3\">\n                                    <label className=\"form-label\">Name</label>\n                                    <input\n                                        type=\"text\"\n                                        placeholder=\"Enter name\"\n                                        className={`form-control ${\n                                            errorMessages.name?.length > 0 && \"is-invalid\"\n                                        }`}\n                                        value={userDetail.name}\n                                        onChange={(e) => handleSetName(e.target.value)}\n                                    />\n                                    <span className=\"invalid-feedback\">{errorMessages.name}</span>\n                                </div>\n                            </form>\n                        </div>\n\n                        <div className=\"modal-footer\">\n                            <button className=\"btn btn-primary\" onClick={handleOnSubmit}>\n                                Save Changes\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {showConfirmModal && (\n                <ModalConfirm\n                    message={UPDATE.user}\n                    onConfirm={confirmUpdate}\n                    onCancel={() => setShowConfirmModal(false)}\n                />\n            )}\n        </>\n    );\n}\n\nexport default EditUserModal;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\users\\ElementUser.jsx","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'user' is missing in props validation","line":5,"column":24,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":28},{"ruleId":"react/prop-types","severity":2,"message":"'handleEditUser' is missing in props validation","line":5,"column":30,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":44},{"ruleId":"react/prop-types","severity":2,"message":"'handleShowModal' is missing in props validation","line":5,"column":46,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":61},{"ruleId":"no-unused-vars","severity":2,"message":"'navigate' is assigned a value but never used.","line":6,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"navigate"},"fix":{"range":[210,241],"text":""},"desc":"Remove unused variable 'navigate'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'user.name' is missing in props validation","line":20,"column":71,"nodeType":"Identifier","messageId":"missingPropType","endLine":20,"endColumn":75},{"ruleId":"react/prop-types","severity":2,"message":"'user.email' is missing in props validation","line":23,"column":71,"nodeType":"Identifier","messageId":"missingPropType","endLine":23,"endColumn":76},{"ruleId":"react/prop-types","severity":2,"message":"'user.role' is missing in props validation","line":28,"column":37,"nodeType":"Identifier","messageId":"missingPropType","endLine":28,"endColumn":41},{"ruleId":"react/prop-types","severity":2,"message":"'user.email' is missing in props validation","line":29,"column":64,"nodeType":"Identifier","messageId":"missingPropType","endLine":29,"endColumn":69},{"ruleId":"react/prop-types","severity":2,"message":"'user.role' is missing in props validation","line":47,"column":40,"nodeType":"Identifier","messageId":"missingPropType","endLine":47,"endColumn":44},{"ruleId":"react/prop-types","severity":2,"message":"'user.id' is missing in props validation","line":49,"column":62,"nodeType":"Identifier","messageId":"missingPropType","endLine":49,"endColumn":64}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useNavigate } from \"react-router-dom\";\nimport { CHANGEROLE, DELETE } from \"@common/messageConfirm\";\nimport { memo } from \"react\";\n\nfunction ElementUser({ user, handleEditUser, handleShowModal }) {\n    const navigate = useNavigate();\n\n    const handleChangeRole = (email, role) => {\n        handleShowModal(CHANGEROLE, \"changeRole\", { email, role });\n    };\n\n    const handleDeleteUser = (id) => {\n        handleShowModal(DELETE.user, \"deleteUser\", { id });\n    };\n\n    return (\n        <>\n            <tr>\n                <td>\n                    <span className=\"my-truncate text-truncate\">{user.name}</span>\n                </td>\n                <td>\n                    <span className=\"my-truncate text-truncate\">{user.email}</span>\n                </td>\n                <td>\n                    <select\n                        className=\"form-control\"\n                        value={user.role}\n                        onChange={(e) => handleChangeRole(user.email, e.target.value)}\n                    >\n                        <option value={0}>User</option>\n                        <option value={1}>Admin</option>\n                    </select>\n                </td>\n                <td>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={() => handleEditUser(user)}\n                        data-bs-toggle=\"modal\"\n                        data-bs-target=\"#modalEditUser\"\n                        title=\"Edit this user\"\n                    >\n                        <i className=\"fa-solid fa-pen-to-square\"></i>\n                    </button>\n                    &nbsp;\n                    <button\n                        disabled={user.role === 1}\n                        className=\"btn btn-danger\"\n                        onClick={() => handleDeleteUser(user.id)}\n                        title=\"Delete this user\"\n                    >\n                        <i className=\"fa-solid fa-trash\"></i>\n                    </button>\n                </td>\n            </tr>\n        </>\n    );\n}\n\nexport default memo(ElementUser);\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\users\\ListUser.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"React"},"fix":{"range":[7,13],"text":""},"desc":"Remove unused variable 'React'."}]},{"ruleId":"react/prop-types","severity":2,"message":"'setUserEdit' is missing in props validation","line":11,"column":21,"nodeType":"Property","messageId":"missingPropType","endLine":11,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":101,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":101,"endColumn":23}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useMemo, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport ElementUser from \"@pages/users/ElementUser\";\nimport PaginationUser from \"@pages/users/PaginationUser\";\nimport ModalConfirm from \"@components/ModalConfirm\";\nimport { changeRole, deleteUser } from \"@stores/actions/userActions\";\nimport Loading from \"@components/Loading\";\n\nconst ListUser = ({ setUserEdit }) => {\n    // Redux hooks\n    const dispatch = useDispatch();\n    const { listUser, loading } = useSelector((state) => state.userStore);\n    const navigate = useNavigate();\n\n    // Local state\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [currentPage, setCurrentPage] = useState(1);\n    const [role, setRole] = useState(\"default\");\n    const [showModal, setShowModal] = useState(false);\n    const [modalMessage, setModalMessage] = useState(\"\");\n    const [actionType, setActionType] = useState(null);\n    const [actionPayload, setActionPayload] = useState(null);\n\n    const itemsPerPage = 5;\n\n    // Memoized filtered data\n    const filteredData = useMemo(() => {\n        let result = listUser;\n\n        if (searchTerm.length > 0) {\n            result = result.filter(\n                (user) =>\n                    user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                    user.name.toLowerCase().includes(searchTerm.toLowerCase()),\n            );\n        }\n\n        if (role !== \"default\") {\n            result = result.filter((user) => user.role === Number(role));\n        }\n\n        return result;\n    }, [searchTerm, role, listUser]);\n\n    const totalPage = Math.ceil(filteredData?.length / itemsPerPage);\n    const indexOfFirstItem = (currentPage - 1) * itemsPerPage;\n    const currentItems = filteredData?.slice(indexOfFirstItem, indexOfFirstItem + itemsPerPage);\n\n    // Event handlers\n    const handleChangePage = useCallback((page) => {\n        setCurrentPage(page);\n    }, []);\n\n    const handleSearch = useCallback((event) => {\n        const keyWord = event.target.value;\n        setSearchTerm(keyWord);\n        setCurrentPage(1);\n    }, []);\n\n    const handleFilterRole = useCallback((event) => {\n        const value = event.target.value;\n        setRole(value);\n        setCurrentPage(1);\n    }, []);\n\n    const handleEditUser = useCallback(\n        (user) => {\n            setUserEdit({\n                ...user,\n                password: \"\",\n            });\n        },\n        [setUserEdit],\n    );\n\n    const handleShowModal = useCallback((message, type, payload) => {\n        setModalMessage(message);\n        setActionType(type);\n        setActionPayload(payload);\n        setShowModal(true);\n    }, []);\n\n    const handleConfirm = useCallback(() => {\n        try {\n            if (actionType === \"changeRole\") {\n                dispatch(\n                    changeRole(actionPayload, () => {\n                        toast.success(\"Role changed successfully\");\n                        navigate(\"/login\");\n                    }),\n                );\n            } else if (actionType === \"deleteUser\") {\n                dispatch(\n                    deleteUser(actionPayload, () => {\n                        toast.success(\"User deleted successfully\");\n                    }),\n                );\n            }\n        } catch (error) {\n            toast.error(\"An error occurred. Please try again.\");\n        } finally {\n            setShowModal(false);\n        }\n    }, [actionType, actionPayload, dispatch, navigate]);\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    return (\n        <div className=\"user-list-container\">\n            <main className=\"main-content\">\n                <div className=\"list-header\">\n                    <button\n                        className=\"create-user-btn\"\n                        data-bs-toggle=\"modal\"\n                        data-bs-target=\"#modalCreateUser\"\n                        title=\"Create User\"\n                    >\n                        <i className=\"fa-solid fa-plus\"></i>\n                        <span>Create User</span>\n                    </button>\n\n                    <div className=\"search-filter-group\">\n                        <div className=\"search-input\">\n                            <i className=\"fa-solid fa-search\"></i>\n                            <input type=\"search\" placeholder=\"Search users...\" onChange={handleSearch} />\n                        </div>\n                        <div className=\"role-filter\">\n                            <select className=\"form-select\" onChange={handleFilterRole} value={role}>\n                                <option value=\"default\">All Roles</option>\n                                <option value=\"1\">Admin</option>\n                                <option value=\"0\">User</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"user-table-wrapper\">\n                    <table className=\"user-table\">\n                        <thead>\n                            <tr>\n                                <th style={{ width: \"25%\" }}>Name</th>\n                                <th style={{ width: \"35%\" }}>Email</th>\n                                <th style={{ width: \"15%\" }}>Role</th>\n                                <th style={{ width: \"15%\" }}>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {currentItems?.length ? (\n                                currentItems.map((user) => (\n                                    <ElementUser\n                                        key={user.id}\n                                        user={user}\n                                        handleEditUser={handleEditUser}\n                                        handleShowModal={handleShowModal}\n                                    />\n                                ))\n                            ) : (\n                                <tr>\n                                    <td colSpan=\"4\" className=\"text-center\">\n                                        No users found\n                                    </td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </table>\n                </div>\n\n                {totalPage > 1 && (\n                    <PaginationUser\n                        totalPage={totalPage}\n                        currentPage={currentPage}\n                        handleChangePage={handleChangePage}\n                    />\n                )}\n            </main>\n\n            {showModal && (\n                <ModalConfirm\n                    message={modalMessage}\n                    onConfirm={handleConfirm}\n                    onCancel={() => setShowModal(false)}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default ListUser;\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\users\\PaginationUser.jsx","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'totalPage' is missing in props validation","line":3,"column":27,"nodeType":"Property","messageId":"missingPropType","endLine":3,"endColumn":36},{"ruleId":"react/prop-types","severity":2,"message":"'currentPage' is missing in props validation","line":3,"column":38,"nodeType":"Property","messageId":"missingPropType","endLine":3,"endColumn":49},{"ruleId":"react/prop-types","severity":2,"message":"'handleChangePage' is missing in props validation","line":3,"column":51,"nodeType":"Property","messageId":"missingPropType","endLine":3,"endColumn":67}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { memo } from \"react\";\n\nfunction PaginationUser({ totalPage, currentPage, handleChangePage }) {\n    return (\n        <>\n            {totalPage > 1 && (\n                <div className=\"col-md-12\">\n                    <nav aria-label=\"Page navigation example\">\n                        <ul className=\"pagination justify-content-center\">\n                            <li className={`page-item ${currentPage === 1 ? \"disabled\" : \"\"}`}>\n                                <a\n                                    role=\"button\"\n                                    className=\"page-link\"\n                                    onClick={() => handleChangePage(currentPage - 1)}\n                                >\n                                    Previous\n                                </a>\n                            </li>\n                            {Array.from({ length: totalPage }).map((p, i) =>\n                                i + 1 === currentPage ? (\n                                    <li key={i} className=\"page-item active\" aria-current=\"page\">\n                                        <span\n                                            role=\"button\"\n                                            className=\"page-link\"\n                                            onClick={() => handleChangePage(i + 1)}\n                                        >\n                                            {i + 1}\n                                        </span>\n                                    </li>\n                                ) : (\n                                    <li key={i} className=\"page-item\">\n                                        <a\n                                            className=\"page-link\"\n                                            role=\"button\"\n                                            onClick={() => handleChangePage(i + 1)}\n                                        >\n                                            {i + 1}\n                                        </a>\n                                    </li>\n                                ),\n                            )}\n                            <li className={`page-item ${currentPage === totalPage ? \"disabled\" : \"\"}`}>\n                                <a\n                                    role=\"button\"\n                                    className=\"page-link\"\n                                    onClick={() => handleChangePage(currentPage + 1)}\n                                >\n                                    Next\n                                </a>\n                            </li>\n                        </ul>\n                    </nav>\n                </div>\n            )}\n        </>\n    );\n}\n\nexport default memo(PaginationUser);\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\pages\\users\\UserManagement.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\stores\\actions\\appAction.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getState' is defined but never used.","line":4,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"getState"},"fix":{"range":[111,121],"text":""},"desc":"Remove unused variable 'getState'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getState' is defined but never used.","line":13,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"getState"},"fix":{"range":[289,299],"text":""},"desc":"Remove unused variable 'getState'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SET_LOADING } from \"@stores/constants\";\n\nexport const showLoading = () => {\n    return async (dispatch, getState) => {\n        dispatch({\n            type: SET_LOADING,\n            payload: true,\n        });\n    };\n};\n\nexport const hideLoading = () => {\n    return async (dispatch, getState) => {\n        dispatch({\n            type: SET_LOADING,\n            payload: false,\n        });\n    };\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\stores\\actions\\authActions.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getState' is defined but never used.","line":10,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"getState"},"fix":{"range":[417,427],"text":""},"desc":"Remove unused variable 'getState'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getState' is defined but never used.","line":38,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"getState"},"fix":{"range":[1294,1304],"text":""},"desc":"Remove unused variable 'getState'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'dispatch' is defined but never used.","line":75,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"dispatch"},"fix":{"range":[2605,2614],"text":""},"desc":"Remove unused variable 'dispatch'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getState' is defined but never used.","line":75,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"getState"},"fix":{"range":[2613,2623],"text":""},"desc":"Remove unused variable 'getState'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from \"axios\";\nimport { TOAST } from \"@common/constants\";\nimport { validateFormLogin, validateFormSignUp } from \"@common/validate\";\nimport { ToastCommon } from \"@components/ToastCommon.jsx\";\nimport { SET_SHOW_SIGNUP, SET_USER_INFO } from \"@stores/constants\";\nimport { persistor } from \"@stores/store\";\nimport { jwtDecode } from \"jwt-decode\";\n\nexport const signUp = (params) => {\n    return async (dispatch, getState) => {\n        try {\n            // validation\n            validateFormSignUp(params);\n\n            const resp = await axios.post(import.meta.env.VITE_BASE_URL + \"/api/signup\", {\n                name: params.name,\n                email: params.email,\n                password: params.password,\n            });\n\n            if (resp) {\n                ToastCommon(\n                    TOAST.SUCCESS,\n                    \"Successfully registered! Please check your email to verify your account.\",\n                );\n                dispatch({\n                    type: SET_SHOW_SIGNUP,\n                    payload: false,\n                });\n            }\n        } catch (error) {\n            ToastCommon(TOAST.ERROR, error.response?.data?.message || error.message);\n        }\n    };\n};\n\nexport const login = (params, onRequestNavigate) => {\n    return async (dispatch, getState) => {\n        try {\n            validateFormLogin(params);\n\n            const resp = await axios.post(import.meta.env.VITE_BASE_URL + \"/api/login\", params);\n\n            if (resp) {\n                // Lưu token vào localStorage\n                localStorage.setItem(\"access_token\", resp.data.access_token);\n                localStorage.setItem(\"refresh_token\", resp.data.refresh_token);\n\n                dispatch({\n                    type: SET_USER_INFO,\n                    payload: jwtDecode(resp.data.access_token),\n                });\n\n                onRequestNavigate();\n            }\n        } catch (error) {\n            // Kiểm tra nếu là lỗi xác thực email chưa\n            if (error?.response?.data?.message) {\n                if (error.response.data.message === \"Please verify your email before logging in.\") {\n                    ToastCommon(\n                        TOAST.ERROR,\n                        \"Bạn chưa xác thực email. Vui lòng kiểm tra hộp thư của bạn để xác thực email.\",\n                    );\n                } else {\n                    ToastCommon(TOAST.ERROR, error.response.data.message);\n                }\n            } else {\n                ToastCommon(TOAST.ERROR, error.message);\n            }\n        }\n    };\n};\n\nexport const logout = () => {\n    return async (dispatch, getState) => {\n        localStorage.removeItem(\"access_token\");\n        localStorage.removeItem(\"refresh_token\");\n        persistor.purge();\n    };\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\stores\\actions\\mapAction.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\stores\\actions\\userActions.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getState' is defined but never used.","line":39,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"getState"},"fix":{"range":[1263,1273],"text":""},"desc":"Remove unused variable 'getState'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getState' is defined but never used.","line":54,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"getState"},"fix":{"range":[1823,1833],"text":""},"desc":"Remove unused variable 'getState'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getState' is defined but never used.","line":70,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"getState"},"fix":{"range":[2350,2360],"text":""},"desc":"Remove unused variable 'getState'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getState' is defined but never used.","line":86,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"getState"},"fix":{"range":[2912,2922],"text":""},"desc":"Remove unused variable 'getState'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { TOAST } from \"@common/constants\";\nimport { ToastCommon } from \"@components/ToastCommon\";\nimport axiosInstance from \"@config/axios-config\";\nimport { SET_LIST_USER, SET_USER_INFO } from \"@stores/constants\";\nimport { hideLoading, showLoading } from \"@stores/actions/appAction\";\nimport { logout } from \"@stores/actions/authActions\";\n\nexport const getListUser = () => {\n    return async (dispatch, getState) => {\n        try {\n            dispatch(showLoading());\n            const resp = await axiosInstance.get(import.meta.env.VITE_BASE_URL + \"/api/user\");\n\n            if (resp) {\n                dispatch({\n                    type: SET_LIST_USER,\n                    payload: resp.data,\n                });\n\n                const userByEmail = resp.data.find(\n                    (user) => user.email === getState().authStore.userInfo.email,\n                );\n\n                dispatch({\n                    type: SET_USER_INFO,\n                    payload: userByEmail,\n                });\n\n                dispatch(hideLoading());\n            }\n        } catch (error) {\n            console.log(error.response?.data?.message);\n            dispatch(hideLoading());\n        }\n    };\n};\n\nexport const createUser = (params) => {\n    return async (dispatch, getState) => {\n        try {\n            const resp = await axiosInstance.post(import.meta.env.VITE_BASE_URL + \"/api/user\", params);\n            if (resp) {\n                document.getElementById(\"close-create-user-btn\").click();\n                ToastCommon(TOAST.SUCCESS, \"Created user successfully\");\n                dispatch(getListUser());\n            }\n        } catch (error) {\n            ToastCommon(TOAST.ERROR, error.response?.data?.message || error.message);\n        }\n    };\n};\n\nexport const deleteUser = (params) => {\n    return async (dispatch, getState) => {\n        try {\n            const resp = await axiosInstance.delete(import.meta.env.VITE_BASE_URL + \"/api/user\", {\n                data: params,\n            });\n            if (resp) {\n                dispatch(getListUser());\n                ToastCommon(TOAST.SUCCESS, \"Deleted user successfully\");\n            }\n        } catch (error) {\n            ToastCommon(TOAST.ERROR, error.response?.data?.message || error.message);\n        }\n    };\n};\n\nexport const updateUser = (params) => {\n    return async (dispatch, getState) => {\n        try {\n            const res = await axiosInstance.put(import.meta.env.VITE_BASE_URL + \"/api/user\", params);\n\n            if (res) {\n                document.getElementById(\"close-edit-user-btn\").click();\n                ToastCommon(TOAST.SUCCESS, \"Updated user successfully\");\n                dispatch(getListUser());\n            }\n        } catch (error) {\n            ToastCommon(TOAST.ERROR, error.response?.data?.message || error.message);\n        }\n    };\n};\n\nexport const updateUserByUser = (params) => {\n    return async (dispatch, getState) => {\n        try {\n            let request = {\n                email: params.email,\n                name: params.name,\n                phone: params.phone,\n                birthday: params.birthday,\n            };\n\n            if (params.password && params.password.length > 0) {\n                request = {\n                    ...request,\n                    password: params.password,\n                };\n            }\n\n            let success = false;\n\n            const resUser = await axiosInstance.put(import.meta.env.VITE_BASE_URL + \"/api/user\", request);\n            if (resUser.status === 200) {\n                success = true;\n            }\n\n            if (success) {\n                ToastCommon(TOAST.SUCCESS, \"Updated user successfully\");\n                dispatch(getListUser());\n            }\n        } catch (error) {\n            ToastCommon(TOAST.ERROR, error.response?.data?.message || error.message);\n        }\n    };\n};\n\nexport const changeRole = (params, navigate) => {\n    return async (dispatch, getState) => {\n        try {\n            const resp = await axiosInstance.put(import.meta.env.VITE_BASE_URL + \"/api/user/changerole\", {\n                email: params.email,\n                role: params.role,\n            });\n\n            if (resp) {\n                ToastCommon(TOAST.SUCCESS, \"Role has been changed successfully.\");\n                dispatch(getListUser());\n                if (getState().authStore.userInfo.email === params.email) {\n                    dispatch(logout());\n                    navigate();\n                }\n            }\n        } catch (error) {\n            ToastCommon(TOAST.ERROR, error.response?.data?.message || error.message);\n        }\n    };\n};\n","usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\stores\\constants.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\stores\\customStorage.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\stores\\reducers\\appReducer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\stores\\reducers\\authReducer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\stores\\reducers\\mapReducer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\stores\\reducers\\userReducer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\src\\stores\\store.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\KhoaLuanTotNghiep\\xamnhapman_tphcm\\frontend\\vite.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
